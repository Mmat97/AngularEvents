{"version":3,"file":"drag-drop.js","sources":["../../../src/cdk/drag-drop/drag-styling.ts","../../../src/cdk/drag-drop/drag-drop-registry.ts","../../../src/cdk/drag-drop/drag-parent.ts","../../../src/cdk/drag-drop/drag-handle.ts","../../../src/cdk/drag-drop/drag-placeholder.ts","../../../src/cdk/drag-drop/drag-preview.ts","../../../src/cdk/drag-drop/drop-list-container.ts","../../../src/cdk/drag-drop/transition-duration.ts","../../../src/cdk/drag-drop/drag.ts","../../../src/cdk/drag-drop/drag-utils.ts","../../../src/cdk/drag-drop/drop-list.ts","../../../src/cdk/drag-drop/drag-drop-module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n// Helper type that ignores `readonly` properties. This is used in\n// `extendStyles` to ignore the readonly properties on CSSStyleDeclaration\n// since we won't be touching those anyway.\ntype Writeable<T> = { -readonly [P in keyof T]-?: T[P] };\n\n/**\n * Extended CSSStyleDeclaration that includes a couple of drag-related\n * properties that aren't in the built-in TS typings.\n */\ninterface DragCSSStyleDeclaration extends CSSStyleDeclaration {\n  webkitUserDrag: string;\n  MozUserSelect: string; // For some reason the Firefox property is in PascalCase.\n}\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @docs-private\n */\nexport function extendStyles(\n    dest: Writeable<CSSStyleDeclaration>,\n    source: Partial<DragCSSStyleDeclaration>) {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      dest[key as keyof CSSStyleDeclaration] = source[key as keyof CSSStyleDeclaration];\n    }\n  }\n\n  return dest;\n}\n\n\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nexport function toggleNativeDragInteractions(element: HTMLElement, enable: boolean) {\n  const userSelect = enable ? '' : 'none';\n\n  extendStyles(element.style, {\n    touchAction: enable ? '' : 'none',\n    webkitUserDrag: enable ? '' : 'none',\n    webkitTapHighlightColor: enable ? '' : 'transparent',\n    userSelect: userSelect,\n    msUserSelect: userSelect,\n    webkitUserSelect: userSelect,\n    MozUserSelect: userSelect\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, NgZone, OnDestroy, Inject} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {Subject} from 'rxjs';\nimport {toggleNativeDragInteractions} from './drag-styling';\n\n/** Event options that can be used to bind an active event. */\nconst activeEventOptions = normalizePassiveListenerOptions({passive: false});\n\n/** Handler for a pointer event callback. */\ntype PointerEventHandler = (event: TouchEvent | MouseEvent) => void;\n\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\n@Injectable({providedIn: 'root'})\nexport class DragDropRegistry<I, C extends {id: string}> implements OnDestroy {\n  private _document: Document;\n\n  /** Registered drop container instances. */\n  private _dropInstances = new Set<C>();\n\n  /** Registered drag item instances. */\n  private _dragInstances = new Set<I>();\n\n  /** Drag item instances that are currently being dragged. */\n  private _activeDragInstances = new Set<I>();\n\n  /** Keeps track of the event listeners that we've bound to the `document`. */\n  private _globalListeners = new Map<'touchmove' | 'mousemove' | 'touchend' | 'mouseup', {\n    handler: PointerEventHandler,\n    options?: any\n  }>();\n\n  /**\n   * Emits the `touchmove` or `mousemove` events that are dispatched\n   * while the user is dragging a drag item instance.\n   */\n  readonly pointerMove: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\n\n  /**\n   * Emits the `touchend` or `mouseup` events that are dispatched\n   * while the user is dragging a drag item instance.\n   */\n  readonly pointerUp: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\n\n  constructor(\n    private _ngZone: NgZone,\n    @Inject(DOCUMENT) _document: any) {\n    this._document = _document;\n  }\n\n  /** Adds a drop container to the registry. */\n  registerDropContainer(drop: C) {\n    if (!this._dropInstances.has(drop)) {\n      if (this.getDropContainer(drop.id)) {\n        throw Error(`Drop instance with id \"${drop.id}\" has already been registered.`);\n      }\n\n      this._dropInstances.add(drop);\n    }\n  }\n\n  /** Adds a drag item instance to the registry. */\n  registerDragItem(drag: I) {\n    this._dragInstances.add(drag);\n\n    if (this._dragInstances.size === 1) {\n      this._ngZone.runOutsideAngular(() => {\n        // The event handler has to be explicitly active, because\n        // newer browsers make it passive by default.\n        this._document.addEventListener('touchmove', this._preventScrollListener,\n            activeEventOptions);\n      });\n    }\n  }\n\n  /** Removes a drop container from the registry. */\n  removeDropContainer(drop: C) {\n    this._dropInstances.delete(drop);\n  }\n\n  /** Removes a drag item instance from the registry. */\n  removeDragItem(drag: I) {\n    this._dragInstances.delete(drag);\n    this.stopDragging(drag);\n\n    if (this._dragInstances.size === 0) {\n      this._document.removeEventListener('touchmove', this._preventScrollListener,\n          activeEventOptions as any);\n    }\n  }\n\n  /**\n   * Starts the dragging sequence for a drag instance.\n   * @param drag Drag instance which is being dragged.\n   * @param event Event that initiated the dragging.\n   */\n  startDragging(drag: I, event: TouchEvent | MouseEvent) {\n    this._activeDragInstances.add(drag);\n\n    if (this._activeDragInstances.size === 1) {\n      const isTouchEvent = event.type.startsWith('touch');\n      const moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';\n      const upEvent = isTouchEvent ? 'touchend' : 'mouseup';\n\n      // We need to disable the native interactions on the entire body, because\n      // the user can start marking text if they drag too far in Safari.\n      toggleNativeDragInteractions(this._document.body, false);\n\n      // We explicitly bind __active__ listeners here, because newer browsers will default to\n      // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n      // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n      this._globalListeners\n        .set(moveEvent, {handler: e => this.pointerMove.next(e), options: activeEventOptions})\n        .set(upEvent, {handler: e => this.pointerUp.next(e)})\n        .forEach((config, name) => {\n          this._ngZone.runOutsideAngular(() => {\n            this._document.addEventListener(name, config.handler, config.options);\n          });\n        });\n    }\n  }\n\n  /** Stops dragging a drag item instance. */\n  stopDragging(drag: I) {\n    this._activeDragInstances.delete(drag);\n\n    if (this._activeDragInstances.size === 0) {\n      this._clearGlobalListeners();\n      toggleNativeDragInteractions(this._document.body, true);\n    }\n  }\n\n  /** Gets whether a drag item instance is currently being dragged. */\n  isDragging(drag: I) {\n    return this._activeDragInstances.has(drag);\n  }\n\n  /** Gets a drop container by its id. */\n  getDropContainer(id: string): C | undefined {\n    return Array.from(this._dropInstances).find(instance => instance.id === id);\n  }\n\n  ngOnDestroy() {\n    this._dragInstances.forEach(instance => this.removeDragItem(instance));\n    this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n    this._clearGlobalListeners();\n    this.pointerMove.complete();\n    this.pointerUp.complete();\n  }\n\n  /**\n   * Listener used to prevent `touchmove` events while the element is being dragged.\n   * This gets bound once, ahead of time, because WebKit won't preventDefault on a\n   * dynamically-added `touchmove` listener. See https://bugs.webkit.org/show_bug.cgi?id=184250.\n   */\n  private _preventScrollListener = (event: TouchEvent) => {\n    if (this._activeDragInstances.size) {\n      event.preventDefault();\n    }\n  }\n\n  /** Clears out the global event listeners from the `document`. */\n  private _clearGlobalListeners() {\n    this._globalListeners.forEach((config, name) => {\n      this._document.removeEventListener(name, config.handler, config.options);\n    });\n\n    this._globalListeners.clear();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nexport const CDK_DRAG_PARENT = new InjectionToken<{}>('CDK_DRAG_PARENT');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, Optional} from '@angular/core';\nimport {CDK_DRAG_PARENT} from './drag-parent';\nimport {toggleNativeDragInteractions} from './drag-styling';\n\n/** Handle that can be used to drag and CdkDrag instance. */\n@Directive({\n  selector: '[cdkDragHandle]',\n  host: {\n    'class': 'cdk-drag-handle'\n  }\n})\nexport class CdkDragHandle {\n  /** Closest parent draggable instance. */\n  _parentDrag: {} | undefined;\n\n  constructor(\n    public element: ElementRef<HTMLElement>,\n    @Inject(CDK_DRAG_PARENT) @Optional() parentDrag?: any) {\n\n    this._parentDrag = parentDrag;\n    toggleNativeDragInteractions(element.nativeElement, false);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, Input} from '@angular/core';\n\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\n@Directive({\n  selector: 'ng-template[cdkDragPlaceholder]'\n})\nexport class CdkDragPlaceholder<T = any> {\n  /** Context data to be added to the placeholder template instance. */\n  @Input() data: T;\n  constructor(public templateRef: TemplateRef<T>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, Input} from '@angular/core';\n\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\n@Directive({\n  selector: 'ng-template[cdkDragPreview]'\n})\nexport class CdkDragPreview<T = any> {\n  /** Context data to be added to the preview template instance. */\n  @Input() data: T;\n  constructor(public templateRef: TemplateRef<T>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, QueryList, ElementRef} from '@angular/core';\nimport {CdkDrag} from './drag';\n\n\nexport interface CdkDropListContainer<T = any> {\n  /** DOM node that corresponds to the drop container. */\n  element: ElementRef<HTMLElement>;\n\n  /** Arbitrary data to attach to all events emitted by this container. */\n  data: T;\n\n  /** Unique ID for the drop zone. */\n  id: string;\n\n  /** Direction in which the list is oriented. */\n  orientation: 'horizontal' | 'vertical';\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  lockAxis: 'x' | 'y';\n\n  /** Starts dragging an item. */\n  start(): void;\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousContainer Container from which the item got dragged in.\n   */\n  drop(item: CdkDrag, currentIndex: number, previousContainer?: CdkDropListContainer): void;\n\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   */\n  enter(item: CdkDrag, pointerX: number, pointerY: number): void;\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: CdkDrag): void;\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: CdkDrag): number;\n  _sortItem(item: CdkDrag, pointerX: number, pointerY: number, delta: {x: number, y: number}): void;\n  _draggables: QueryList<CdkDrag>;\n  _getSiblingContainerFromPosition(item: CdkDrag, x: number, y: number):\n      CdkDropListContainer | null;\n  _canReturnItem(item: CdkDrag, x: number, y: number): boolean;\n}\n\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n */\nexport const CDK_DROP_LIST_CONTAINER =\n    new InjectionToken<CdkDropListContainer>('CDK_DROP_LIST_CONTAINER');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value: string): number {\n  // Some browsers will return it in seconds, whereas others will return milliseconds.\n  const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n  return parseFloat(value) * multiplier;\n}\n\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nexport function getTransformTransitionDurationInMs(element: HTMLElement): number {\n  const computedStyle = getComputedStyle(element);\n  const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n  const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n\n  // If there's no transition for `all` or `transform`, we shouldn't do anything.\n  if (!property) {\n    return 0;\n  }\n\n  // Get the index of the property that we're interested in and match\n  // it up to the same index in `transition-delay` and `transition-duration`.\n  const propertyIndex = transitionedProperties.indexOf(property);\n  const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n  const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n\n  return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n         parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle: CSSStyleDeclaration, name: string): string[] {\n  const value = computedStyle.getPropertyValue(name);\n  return value.split(',').map(part => part.trim());\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  ViewContainerRef,\n} from '@angular/core';\nimport {supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {Observable, Subject, Subscription, Observer} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {DragDropRegistry} from './drag-drop-registry';\nimport {\n  CdkDragDrop,\n  CdkDragEnd,\n  CdkDragEnter,\n  CdkDragExit,\n  CdkDragMove,\n  CdkDragStart,\n} from './drag-events';\nimport {CdkDragHandle} from './drag-handle';\nimport {CdkDragPlaceholder} from './drag-placeholder';\nimport {CdkDragPreview} from './drag-preview';\nimport {CDK_DROP_LIST_CONTAINER, CdkDropListContainer} from './drop-list-container';\nimport {getTransformTransitionDurationInMs} from './transition-duration';\nimport {extendStyles, toggleNativeDragInteractions} from './drag-styling';\nimport {CDK_DRAG_PARENT} from './drag-parent';\n\n\n// TODO(crisbeto): add auto-scrolling functionality.\n// TODO(crisbeto): add an API for moving a draggable up/down the\n// list programmatically. Useful for keyboard controls.\n\n/** Object that can be used to configure the behavior of CdkDrag. */\nexport interface CdkDragConfig {\n  /**\n   * Minimum amount of pixels that the user should\n   * drag, before the CDK initiates a drag sequence.\n   */\n  dragStartThreshold: number;\n\n  /**\n   * Amount the pixels the user should drag before the CDK\n   * considers them to have changed the drag direction.\n   */\n  pointerDirectionChangeThreshold: number;\n}\n\n/** Injection token that can be used to configure the behavior of `CdkDrag`. */\nexport const CDK_DRAG_CONFIG = new InjectionToken<CdkDragConfig>('CDK_DRAG_CONFIG', {\n  providedIn: 'root',\n  factory: CDK_DRAG_CONFIG_FACTORY\n});\n\n/** @docs-private */\nexport function CDK_DRAG_CONFIG_FACTORY(): CdkDragConfig {\n  return {dragStartThreshold: 5, pointerDirectionChangeThreshold: 5};\n}\n\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = supportsPassiveEventListeners() ?\n    {passive: true} as EventListenerOptions : false;\n\n/** Element that can be moved inside a CdkDropList container. */\n@Directive({\n  selector: '[cdkDrag]',\n  exportAs: 'cdkDrag',\n  host: {\n    'class': 'cdk-drag',\n    '[class.cdk-drag-dragging]': '_hasStartedDragging && _isDragging()',\n  },\n  providers: [{\n    provide: CDK_DRAG_PARENT,\n    useExisting: CdkDrag\n  }]\n})\nexport class CdkDrag<T = any> implements AfterViewInit, OnDestroy {\n  private _document: Document;\n\n  /** Element displayed next to the user's pointer while the element is dragged. */\n  private _preview: HTMLElement;\n\n  /** Reference to the view of the preview element. */\n  private _previewRef: EmbeddedViewRef<any> | null;\n\n  /** Reference to the view of the placeholder element. */\n  private _placeholderRef: EmbeddedViewRef<any> | null;\n\n  /** Element that is rendered instead of the draggable item while it is being sorted. */\n  private _placeholder: HTMLElement;\n\n  /** Coordinates within the element at which the user picked up the element. */\n  private _pickupPositionInElement: Point;\n\n  /** Coordinates on the page at which the user picked up the element. */\n  private _pickupPositionOnPage: Point;\n\n  /**\n   * Reference to the element that comes after the draggable in the DOM, at the time\n   * it was picked up. Used for restoring its initial position when it's dropped.\n   */\n  private _nextSibling: Node | null;\n\n  /**\n   * CSS `transform` applied to the element when it isn't being dragged. We need a\n   * passive transform in order for the dragged element to retain its new position\n   * after the user has stopped dragging and because we need to know the relative\n   * position in case they start dragging again. This corresponds to `element.style.transform`.\n   */\n  private _passiveTransform: Point = {x: 0, y: 0};\n\n  /** CSS `transform` that is applied to the element while it's being dragged. */\n  private _activeTransform: Point = {x: 0, y: 0};\n\n  /** Inline `transform` value that the element had before the first dragging sequence. */\n  private _initialTransform?: string;\n\n  /**\n   * Whether the dragging sequence has been started. Doesn't\n   * necessarily mean that the element has been moved.\n   */\n  _hasStartedDragging: boolean;\n\n  /** Whether the element has moved since the user started dragging it. */\n  private _hasMoved: boolean;\n\n  /** Drop container in which the CdkDrag resided when dragging began. */\n  private _initialContainer: CdkDropListContainer;\n\n  /** Cached scroll position on the page when the element was picked up. */\n  private _scrollPosition: {top: number, left: number};\n\n  /** Emits when the item is being moved. */\n  private _moveEvents = new Subject<CdkDragMove<T>>();\n\n  /**\n   * Amount of subscriptions to the move event. Used to avoid\n   * hitting the zone if the consumer didn't subscribe to it.\n   */\n  private _moveEventSubscriptions = 0;\n\n  /** Keeps track of the direction in which the user is dragging along each axis. */\n  private _pointerDirectionDelta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\n\n  /** Pointer position at which the last change in the delta occurred. */\n  private _pointerPositionAtLastDirectionChange: Point;\n\n  /** Root element that will be dragged by the user. */\n  private _rootElement: HTMLElement;\n\n  /** Subscription to pointer movement events. */\n  private _pointerMoveSubscription = Subscription.EMPTY;\n\n  /** Subscription to the event that is dispatched when the user lifts their pointer. */\n  private _pointerUpSubscription = Subscription.EMPTY;\n\n  /** Elements that can be used to drag the draggable item. */\n  @ContentChildren(CdkDragHandle, {descendants: true}) _handles: QueryList<CdkDragHandle>;\n\n  /** Element that will be used as a template to create the draggable item's preview. */\n  @ContentChild(CdkDragPreview) _previewTemplate: CdkDragPreview;\n\n  /** Template for placeholder element rendered to show where a draggable would be dropped. */\n  @ContentChild(CdkDragPlaceholder) _placeholderTemplate: CdkDragPlaceholder;\n\n  /** Arbitrary data to attach to this drag instance. */\n  @Input('cdkDragData') data: T;\n\n  /** Locks the position of the dragged element along the specified axis. */\n  @Input('cdkDragLockAxis') lockAxis: 'x' | 'y';\n\n  /**\n   * Selector that will be used to determine the root draggable element, starting from\n   * the `cdkDrag` element and going up the DOM. Passing an alternate root element is useful\n   * when trying to enable dragging on an element that you might not have access to.\n   */\n  @Input('cdkDragRootElement') rootElementSelector: string;\n\n  /** Emits when the user starts dragging the item. */\n  @Output('cdkDragStarted') started: EventEmitter<CdkDragStart> = new EventEmitter<CdkDragStart>();\n\n  /** Emits when the user stops dragging an item in the container. */\n  @Output('cdkDragEnded') ended: EventEmitter<CdkDragEnd> = new EventEmitter<CdkDragEnd>();\n\n  /** Emits when the user has moved the item into a new container. */\n  @Output('cdkDragEntered') entered: EventEmitter<CdkDragEnter<any>> =\n      new EventEmitter<CdkDragEnter<any>>();\n\n  /** Emits when the user removes the item its container by dragging it into another container. */\n  @Output('cdkDragExited') exited: EventEmitter<CdkDragExit<any>> =\n      new EventEmitter<CdkDragExit<any>>();\n\n  /** Emits when the user drops the item inside a container. */\n  @Output('cdkDragDropped') dropped: EventEmitter<CdkDragDrop<any>> =\n      new EventEmitter<CdkDragDrop<any>>();\n\n  /**\n   * Emits as the user is dragging the item. Use with caution,\n   * because this event will fire for every pixel that the user has dragged.\n   */\n  @Output('cdkDragMoved') moved: Observable<CdkDragMove<T>> =\n      Observable.create((observer: Observer<CdkDragMove<T>>) => {\n        const subscription = this._moveEvents.subscribe(observer);\n        this._moveEventSubscriptions++;\n\n        return () => {\n          subscription.unsubscribe();\n          this._moveEventSubscriptions--;\n        };\n      });\n\n  constructor(\n    /** Element that the draggable is attached to. */\n    public element: ElementRef<HTMLElement>,\n    /** Droppable container that the draggable is a part of. */\n    @Inject(CDK_DROP_LIST_CONTAINER) @Optional() @SkipSelf()\n    public dropContainer: CdkDropListContainer,\n    @Inject(DOCUMENT) document: any,\n    private _ngZone: NgZone,\n    private _viewContainerRef: ViewContainerRef,\n    private _viewportRuler: ViewportRuler,\n    private _dragDropRegistry: DragDropRegistry<CdkDrag<T>, CdkDropListContainer>,\n    @Inject(CDK_DRAG_CONFIG) private _config: CdkDragConfig,\n    @Optional() private _dir: Directionality) {\n      this._document = document;\n      _dragDropRegistry.registerDragItem(this);\n    }\n\n  /**\n   * Returns the element that is being used as a placeholder\n   * while the current element is being dragged.\n   */\n  getPlaceholderElement(): HTMLElement {\n    return this._placeholder;\n  }\n\n  /** Returns the root draggable element. */\n  getRootElement(): HTMLElement {\n    return this._rootElement;\n  }\n\n  ngAfterViewInit() {\n    // We need to wait for the zone to stabilize, in order for the reference\n    // element to be in the proper place in the DOM. This is mostly relevant\n    // for draggable elements inside portals since they get stamped out in\n    // their original DOM position and then they get transferred to the portal.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      const rootElement = this._rootElement = this._getRootElement();\n      rootElement.addEventListener('mousedown', this._pointerDown, passiveEventListenerOptions);\n      rootElement.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n      toggleNativeDragInteractions(rootElement , false);\n    });\n  }\n\n  ngOnDestroy() {\n    this._rootElement.removeEventListener('mousedown', this._pointerDown,\n        passiveEventListenerOptions);\n    this._rootElement.removeEventListener('touchstart', this._pointerDown,\n        passiveEventListenerOptions);\n    this._destroyPreview();\n    this._destroyPlaceholder();\n\n    // Do this check before removing from the registry since it'll\n    // stop being considered as dragged once it is removed.\n    if (this._isDragging()) {\n      // Since we move out the element to the end of the body while it's being\n      // dragged, we have to make sure that it's removed if it gets destroyed.\n      this._removeElement(this._rootElement);\n    }\n\n    this._nextSibling = null;\n    this._dragDropRegistry.removeDragItem(this);\n    this._removeSubscriptions();\n    this._moveEvents.complete();\n  }\n\n  /** Checks whether the element is currently being dragged. */\n  _isDragging() {\n    return this._dragDropRegistry.isDragging(this);\n  }\n\n  /** Handler for the `mousedown`/`touchstart` events. */\n  _pointerDown = (event: MouseEvent | TouchEvent) => {\n    // Skip handles inside descendant `CdkDrag` instances.\n    const handles = this._handles.filter(handle => handle._parentDrag === this);\n\n    // Delegate the event based on whether it started from a handle or the element itself.\n    if (handles.length) {\n      const targetHandle = handles.find(handle => {\n        const element = handle.element.nativeElement;\n        const target = event.target;\n        return !!target && (target === element || element.contains(target as HTMLElement));\n      });\n\n      if (targetHandle) {\n        this._initializeDragSequence(targetHandle.element.nativeElement, event);\n      }\n    } else {\n      this._initializeDragSequence(this._rootElement, event);\n    }\n  }\n\n  /**\n   * Sets up the different variables and subscriptions\n   * that will be necessary for the dragging sequence.\n   * @param referenceElement Element that started the drag sequence.\n   * @param event Browser event object that started the sequence.\n   */\n  private _initializeDragSequence(referenceElement: HTMLElement, event: MouseEvent | TouchEvent) {\n    const isDragging = this._isDragging();\n\n    // Abort if the user is already dragging or is using a mouse button other than the primary one.\n    if (isDragging || (!this._isTouchEvent(event) && event.button !== 0)) {\n      return;\n    }\n\n    // Cache the previous transform amount only after the first drag sequence, because\n    // we don't want our own transforms to stack on top of each other.\n    if (this._initialTransform == null) {\n      this._initialTransform = this._rootElement.style.transform || '';\n    }\n\n    this._hasStartedDragging = this._hasMoved = false;\n    this._initialContainer = this.dropContainer;\n    this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n    this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n    this._scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n    // If we have a custom preview template, the element won't be visible anyway so we avoid the\n    // extra `getBoundingClientRect` calls and just move the preview next to the cursor.\n    this._pickupPositionInElement = this._previewTemplate ? {x: 0, y: 0} :\n        this._getPointerPositionInElement(referenceElement, event);\n    const pointerPosition = this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\n    this._pointerDirectionDelta = {x: 0, y: 0};\n    this._pointerPositionAtLastDirectionChange = {x: pointerPosition.x, y: pointerPosition.y};\n    this._dragDropRegistry.startDragging(this, event);\n  }\n\n  /** Starts the dragging sequence. */\n  private _startDragSequence() {\n    // Emit the event on the item before the one on the container.\n    this.started.emit({source: this});\n\n    if (this.dropContainer) {\n      const element = this._rootElement;\n\n      // Grab the `nextSibling` before the preview and placeholder\n      // have been created so we don't get the preview by accident.\n      this._nextSibling = element.nextSibling;\n\n      const preview = this._preview = this._createPreviewElement();\n      const placeholder = this._placeholder = this._createPlaceholderElement();\n\n      // We move the element out at the end of the body and we make it hidden, because keeping it in\n      // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n      // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n      element.style.display = 'none';\n      this._document.body.appendChild(element.parentNode!.replaceChild(placeholder, element));\n      this._document.body.appendChild(preview);\n      this.dropContainer.start();\n    }\n  }\n\n  /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n  private _pointerMove = (event: MouseEvent | TouchEvent) => {\n    const pointerPosition = this._getConstrainedPointerPosition(event);\n\n    if (!this._hasStartedDragging) {\n      const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n      const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n\n      // Only start dragging after the user has moved more than the minimum distance in either\n      // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n      // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n      // per pixel of movement (e.g. if the user moves their pointer quickly).\n      if (distanceX + distanceY >= this._config.dragStartThreshold) {\n        this._hasStartedDragging = true;\n        this._ngZone.run(() => this._startDragSequence());\n      }\n\n      return;\n    }\n\n    this._hasMoved = true;\n    event.preventDefault();\n    this._updatePointerDirectionDelta(pointerPosition);\n\n    if (this.dropContainer) {\n      this._updateActiveDropContainer(pointerPosition);\n    } else {\n      const activeTransform = this._activeTransform;\n      activeTransform.x =\n          pointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n      activeTransform.y =\n          pointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n      const transform = getTransform(activeTransform.x, activeTransform.y);\n\n      // Preserve the previous `transform` value, if there was one.\n      this._rootElement.style.transform = this._initialTransform ?\n          this._initialTransform + ' ' + transform : transform;\n    }\n\n    // Since this event gets fired for every pixel while dragging, we only\n    // want to fire it if the consumer opted into it. Also we have to\n    // re-enter the zone because we run all of the events on the outside.\n    if (this._moveEventSubscriptions > 0) {\n      this._ngZone.run(() => {\n        this._moveEvents.next({\n          source: this,\n          pointerPosition,\n          event,\n          delta: this._pointerDirectionDelta\n        });\n      });\n    }\n  }\n\n  /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n  private _pointerUp = () => {\n    if (!this._isDragging()) {\n      return;\n    }\n\n    this._removeSubscriptions();\n    this._dragDropRegistry.stopDragging(this);\n\n    if (!this._hasStartedDragging) {\n      return;\n    }\n\n    if (!this.dropContainer) {\n      // Convert the active transform into a passive one. This means that next time\n      // the user starts dragging the item, its position will be calculated relatively\n      // to the new passive transform.\n      this._passiveTransform.x = this._activeTransform.x;\n      this._passiveTransform.y = this._activeTransform.y;\n      this._ngZone.run(() => this.ended.emit({source: this}));\n      return;\n    }\n\n    this._animatePreviewToPlaceholder().then(() => this._cleanupDragArtifacts());\n  }\n\n  /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n  private _cleanupDragArtifacts() {\n    // Restore the element's visibility and insert it at its old position in the DOM.\n    // It's important that we maintain the position, because moving the element around in the DOM\n    // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n    // while moving the existing elements in all other cases.\n    this._rootElement.style.display = '';\n\n    if (this._nextSibling) {\n      this._nextSibling.parentNode!.insertBefore(this._rootElement, this._nextSibling);\n    } else {\n      this._initialContainer.element.nativeElement.appendChild(this._rootElement);\n    }\n\n    this._destroyPreview();\n    this._destroyPlaceholder();\n\n    // Re-enter the NgZone since we bound `document` events on the outside.\n    this._ngZone.run(() => {\n      const currentIndex = this.dropContainer.getItemIndex(this);\n\n      this.ended.emit({source: this});\n      this.dropped.emit({\n        item: this,\n        currentIndex,\n        previousIndex: this._initialContainer.getItemIndex(this),\n        container: this.dropContainer,\n        previousContainer: this._initialContainer\n      });\n      this.dropContainer.drop(this, currentIndex, this._initialContainer);\n      this.dropContainer = this._initialContainer;\n    });\n  }\n\n  /**\n   * Updates the item's position in its drop container, or moves it\n   * into a new one, depending on its current drag position.\n   */\n  private _updateActiveDropContainer({x, y}: Point) {\n    // Drop container that draggable has been moved into.\n    let newContainer = this.dropContainer._getSiblingContainerFromPosition(this, x, y);\n\n    // If we couldn't find a new container to move the item into, and the item has left it's\n    // initial container, check whether the it's allowed to return into its original container.\n    // This handles the case where two containers are connected one way and the user tries to\n    // undo dragging an item into a new container.\n    if (!newContainer && this.dropContainer !== this._initialContainer &&\n        this._initialContainer._canReturnItem(this, x, y)) {\n      newContainer = this._initialContainer;\n    }\n\n    if (newContainer) {\n      this._ngZone.run(() => {\n        // Notify the old container that the item has left.\n        this.exited.emit({item: this, container: this.dropContainer});\n        this.dropContainer.exit(this);\n        // Notify the new container that the item has entered.\n        this.entered.emit({item: this, container: newContainer!});\n        this.dropContainer = newContainer!;\n        this.dropContainer.enter(this, x, y);\n      });\n    }\n\n    this.dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n    this._preview.style.transform =\n        getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n  }\n\n  /**\n   * Creates the element that will be rendered next to the user's pointer\n   * and will be used as a preview of the element that is being dragged.\n   */\n  private _createPreviewElement(): HTMLElement {\n    let preview: HTMLElement;\n\n    if (this._previewTemplate) {\n      const viewRef = this._viewContainerRef.createEmbeddedView(this._previewTemplate.templateRef,\n                                                                this._previewTemplate.data);\n\n      preview = viewRef.rootNodes[0];\n      this._previewRef = viewRef;\n      preview.style.transform =\n          getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n    } else {\n      const element = this._rootElement;\n      const elementRect = element.getBoundingClientRect();\n\n      preview = element.cloneNode(true) as HTMLElement;\n      preview.style.width = `${elementRect.width}px`;\n      preview.style.height = `${elementRect.height}px`;\n      preview.style.transform = getTransform(elementRect.left, elementRect.top);\n    }\n\n    extendStyles(preview.style, {\n      position: 'fixed',\n      top: '0',\n      left: '0',\n      zIndex: '1000'\n    });\n\n    preview.classList.add('cdk-drag-preview');\n    preview.setAttribute('dir', this._dir ? this._dir.value : 'ltr');\n\n    return preview;\n  }\n\n  /** Creates an element that will be shown instead of the current element while dragging. */\n  private _createPlaceholderElement(): HTMLElement {\n    let placeholder: HTMLElement;\n\n    if (this._placeholderTemplate) {\n      this._placeholderRef = this._viewContainerRef.createEmbeddedView(\n        this._placeholderTemplate.templateRef,\n        this._placeholderTemplate.data\n      );\n      placeholder = this._placeholderRef.rootNodes[0];\n    } else {\n      placeholder = this._rootElement.cloneNode(true) as HTMLElement;\n    }\n\n    placeholder.classList.add('cdk-drag-placeholder');\n    return placeholder;\n  }\n\n  /**\n   * Figures out the coordinates at which an element was picked up.\n   * @param referenceElement Element that initiated the dragging.\n   * @param event Event that initiated the dragging.\n   */\n  private _getPointerPositionInElement(referenceElement: HTMLElement,\n                                       event: MouseEvent | TouchEvent): Point {\n    const elementRect = this._rootElement.getBoundingClientRect();\n    const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n    const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n    const point = this._isTouchEvent(event) ? event.targetTouches[0] : event;\n    const x = point.pageX - referenceRect.left - this._scrollPosition.left;\n    const y = point.pageY - referenceRect.top - this._scrollPosition.top;\n\n    return {\n      x: referenceRect.left - elementRect.left + x,\n      y: referenceRect.top - elementRect.top + y\n    };\n  }\n\n  /**\n   * Animates the preview element from its current position to the location of the drop placeholder.\n   * @returns Promise that resolves when the animation completes.\n   */\n  private _animatePreviewToPlaceholder(): Promise<void> {\n    // If the user hasn't moved yet, the transitionend event won't fire.\n    if (!this._hasMoved) {\n      return Promise.resolve();\n    }\n\n    const placeholderRect = this._placeholder.getBoundingClientRect();\n\n    // Apply the class that adds a transition to the preview.\n    this._preview.classList.add('cdk-drag-animating');\n\n    // Move the preview to the placeholder position.\n    this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\n\n    // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n    // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n    // apply its style, we take advantage of the available info to figure out whether we need to\n    // bind the event in the first place.\n    const duration = getTransformTransitionDurationInMs(this._preview);\n\n    if (duration === 0) {\n      return Promise.resolve();\n    }\n\n    return this._ngZone.runOutsideAngular(() => {\n      return new Promise(resolve => {\n        const handler = ((event: TransitionEvent) => {\n          if (!event || (event.target === this._preview && event.propertyName === 'transform')) {\n            this._preview.removeEventListener('transitionend', handler);\n            resolve();\n            clearTimeout(timeout);\n          }\n        }) as EventListenerOrEventListenerObject;\n\n        // If a transition is short enough, the browser might not fire the `transitionend` event.\n        // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n        // fire if the transition hasn't completed when it was supposed to.\n        const timeout = setTimeout(handler as Function, duration * 1.5);\n        this._preview.addEventListener('transitionend', handler);\n      });\n    });\n  }\n\n  /**\n   * Helper to remove an element from the DOM and to do all the necessary null checks.\n   * @param element Element to be removed.\n   */\n  private _removeElement(element: HTMLElement | null) {\n    if (element && element.parentNode) {\n      element.parentNode.removeChild(element);\n    }\n  }\n\n  /** Determines the point of the page that was touched by the user. */\n  private _getPointerPositionOnPage(event: MouseEvent | TouchEvent): Point {\n    const point = this._isTouchEvent(event) ? event.touches[0] : event;\n\n    return {\n      x: point.pageX - this._scrollPosition.left,\n      y: point.pageY - this._scrollPosition.top\n    };\n  }\n\n  /** Gets the pointer position on the page, accounting for any position constraints. */\n  private _getConstrainedPointerPosition(event: MouseEvent | TouchEvent): Point {\n    const point = this._getPointerPositionOnPage(event);\n    const dropContainerLock = this.dropContainer ? this.dropContainer.lockAxis : null;\n\n    if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n      point.y = this._pickupPositionOnPage.y;\n    } else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n      point.x = this._pickupPositionOnPage.x;\n    }\n\n    return point;\n  }\n\n  /** Determines whether an event is a touch event. */\n  private _isTouchEvent(event: MouseEvent | TouchEvent): event is TouchEvent {\n    return event.type.startsWith('touch');\n  }\n\n  /** Destroys the preview element and its ViewRef. */\n  private _destroyPreview() {\n    if (this._preview) {\n      this._removeElement(this._preview);\n    }\n\n    if (this._previewRef) {\n      this._previewRef.destroy();\n    }\n\n    this._preview = this._previewRef = null!;\n  }\n\n  /** Destroys the placeholder element and its ViewRef. */\n  private _destroyPlaceholder() {\n    if (this._placeholder) {\n      this._removeElement(this._placeholder);\n    }\n\n    if (this._placeholderRef) {\n      this._placeholderRef.destroy();\n    }\n\n    this._placeholder = this._placeholderRef = null!;\n  }\n\n  /** Updates the current drag delta, based on the user's current pointer position on the page. */\n  private _updatePointerDirectionDelta(pointerPositionOnPage: Point) {\n    const {x, y} = pointerPositionOnPage;\n    const delta = this._pointerDirectionDelta;\n    const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n\n    // Amount of pixels the user has dragged since the last time the direction changed.\n    const changeX = Math.abs(x - positionSinceLastChange.x);\n    const changeY = Math.abs(y - positionSinceLastChange.y);\n\n    // Because we handle pointer events on a per-pixel basis, we don't want the delta\n    // to change for every pixel, otherwise anything that depends on it can look erratic.\n    // To make the delta more consistent, we track how much the user has moved since the last\n    // delta change and we only update it after it has reached a certain threshold.\n    if (changeX > this._config.pointerDirectionChangeThreshold) {\n      delta.x = x > positionSinceLastChange.x ? 1 : -1;\n      positionSinceLastChange.x = x;\n    }\n\n    if (changeY > this._config.pointerDirectionChangeThreshold) {\n      delta.y = y > positionSinceLastChange.y ? 1 : -1;\n      positionSinceLastChange.y = y;\n    }\n\n    return delta;\n  }\n\n  /** Gets the root draggable element, based on the `rootElementSelector`. */\n  private _getRootElement(): HTMLElement {\n    if (this.rootElementSelector) {\n      const selector = this.rootElementSelector;\n      let currentElement = this.element.nativeElement.parentElement as HTMLElement | null;\n\n      while (currentElement) {\n        // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n        if (currentElement.matches ? currentElement.matches(selector) :\n            (currentElement as any).msMatchesSelector(selector)) {\n          return currentElement;\n        }\n\n        currentElement = currentElement.parentElement;\n      }\n    }\n\n    return this.element.nativeElement;\n  }\n\n  /** Unsubscribes from the global subscriptions. */\n  private _removeSubscriptions() {\n    this._pointerMoveSubscription.unsubscribe();\n    this._pointerUpSubscription.unsubscribe();\n  }\n}\n\n/** Point on the page or within an element. */\ninterface Point {\n  x: number;\n  y: number;\n}\n\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x: number, y: number): string {\n  return `translate3d(${x}px, ${y}px, 0)`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nexport function moveItemInArray<T = any>(array: T[], fromIndex: number, toIndex: number): void {\n  const from = clamp(fromIndex, array.length - 1);\n  const to = clamp(toIndex, array.length - 1);\n\n  if (from === to) {\n    return;\n  }\n\n  const target = array[from];\n  const delta = to < from ? -1 : 1;\n\n  for (let i = from; i !== to; i += delta) {\n    array[i] = array[i + delta];\n  }\n\n  array[to] = target;\n}\n\n\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nexport function transferArrayItem<T = any>(currentArray: T[],\n                                           targetArray: T[],\n                                           currentIndex: number,\n                                           targetIndex: number): void {\n  const from = clamp(currentIndex, currentArray.length - 1);\n  const to = clamp(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n  }\n}\n\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nexport function copyArrayItem<T = any>(currentArray: T[],\n                                       targetArray: T[],\n                                       currentIndex: number,\n                                       targetIndex: number): void {\n  const to = clamp(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray[currentIndex]);\n  }\n}\n\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value: number, max: number): number {\n  return Math.max(0, Math.min(max, value));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceArray} from '@angular/cdk/coercion';\nimport {\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  Optional,\n  Directive,\n} from '@angular/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkDrag} from './drag';\nimport {DragDropRegistry} from './drag-drop-registry';\nimport {CdkDragDrop, CdkDragEnter, CdkDragExit} from './drag-events';\nimport {moveItemInArray} from './drag-utils';\nimport {CDK_DROP_LIST_CONTAINER} from './drop-list-container';\n\n\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n\n/** Container that wraps a set of draggable items. */\n@Directive({\n  selector: '[cdkDropList], cdk-drop-list',\n  exportAs: 'cdkDropList',\n  providers: [\n    {provide: CDK_DROP_LIST_CONTAINER, useExisting: CdkDropList},\n  ],\n  host: {\n    'class': 'cdk-drop-list',\n    '[id]': 'id',\n    '[class.cdk-drop-list-dragging]': '_dragging'\n  }\n})\nexport class CdkDropList<T = any> implements OnInit, OnDestroy {\n  /** Draggable items in the container. */\n  @ContentChildren(forwardRef(() => CdkDrag)) _draggables: QueryList<CdkDrag>;\n\n  /**\n   * Other draggable containers that this container is connected to and into which the\n   * container's items can be transferred. Can either be references to other drop containers,\n   * or their unique IDs.\n   */\n  @Input('cdkDropListConnectedTo')\n  connectedTo: (CdkDropList | string)[] | CdkDropList | string = [];\n\n  /** Arbitrary data to attach to this container. */\n  @Input('cdkDropListData') data: T;\n\n  /** Direction in which the list is oriented. */\n  @Input('cdkDropListOrientation') orientation: 'horizontal' | 'vertical' = 'vertical';\n\n  /**\n   * Unique ID for the drop zone. Can be used as a reference\n   * in the `connectedTo` of another `CdkDropList`.\n   */\n  @Input() id: string = `cdk-drop-list-${_uniqueIdCounter++}`;\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  @Input('cdkDropListLockAxis') lockAxis: 'x' | 'y';\n\n  /**\n   * Function that is used to determine whether an item\n   * is allowed to be moved into a drop container.\n   */\n  @Input('cdkDropListEnterPredicate')\n  enterPredicate: (drag: CdkDrag, drop: CdkDropList) => boolean = () => true\n\n  /** Emits when the user drops an item inside the container. */\n  @Output('cdkDropListDropped')\n  dropped: EventEmitter<CdkDragDrop<T, any>> = new EventEmitter<CdkDragDrop<T, any>>();\n\n  /**\n   * Emits when the user has moved a new drag item into this container.\n   */\n  @Output('cdkDropListEntered')\n  entered: EventEmitter<CdkDragEnter<T>> = new EventEmitter<CdkDragEnter<T>>();\n\n  /**\n   * Emits when the user removes an item from the container\n   * by dragging it into another container.\n   */\n  @Output('cdkDropListExited')\n  exited: EventEmitter<CdkDragExit<T>> = new EventEmitter<CdkDragExit<T>>();\n\n  constructor(\n    public element: ElementRef<HTMLElement>,\n    private _dragDropRegistry: DragDropRegistry<CdkDrag, CdkDropList<T>>,\n    @Optional() private _dir?: Directionality) {}\n\n  ngOnInit() {\n    this._dragDropRegistry.registerDropContainer(this);\n  }\n\n  ngOnDestroy() {\n    this._dragDropRegistry.removeDropContainer(this);\n  }\n\n  /** Whether an item in the container is being dragged. */\n  _dragging = false;\n\n  /** Cache of the dimensions of all the items and the sibling containers. */\n  private _positionCache = {\n    items: [] as {drag: CdkDrag, clientRect: ClientRect, offset: number}[],\n    siblings: [] as {drop: CdkDropList, clientRect: ClientRect}[],\n    self: {} as ClientRect\n  };\n\n  /**\n   * Draggable items that are currently active inside the container. Includes the items\n   * from `_draggables`, as well as any items that have been dragged in, but haven't\n   * been dropped yet.\n   */\n  private _activeDraggables: CdkDrag[];\n\n  /**\n   * Keeps track of the item that was last swapped with the dragged item, as\n   * well as what direction the pointer was moving in when the swap occured.\n   */\n  private _previousSwap = {drag: null as CdkDrag | null, delta: 0};\n\n  /** Starts dragging an item. */\n  start(): void {\n    this._dragging = true;\n    this._activeDraggables = this._draggables.toArray();\n    this._cachePositions();\n  }\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousContainer Container from which the item got dragged in.\n   */\n  drop(item: CdkDrag, currentIndex: number, previousContainer: CdkDropList): void {\n    this._reset();\n    this.dropped.emit({\n      item,\n      currentIndex,\n      previousIndex: previousContainer.getItemIndex(item),\n      container: this,\n      // TODO(crisbeto): reconsider whether to make this null if the containers are the same.\n      previousContainer\n    });\n  }\n\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   */\n  enter(item: CdkDrag, pointerX: number, pointerY: number): void {\n    this.entered.emit({item, container: this});\n    this.start();\n\n    // We use the coordinates of where the item entered the drop\n    // zone to figure out at which index it should be inserted.\n    const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n    const currentIndex = this._activeDraggables.indexOf(item);\n    const newPositionReference = this._activeDraggables[newIndex];\n    const placeholder = item.getPlaceholderElement();\n\n    // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n    // into another container and back again), we have to ensure that it isn't duplicated.\n    if (currentIndex > -1) {\n      this._activeDraggables.splice(currentIndex, 1);\n    }\n\n    // Don't use items that are being dragged as a reference, because\n    // their element has been moved down to the bottom of the body.\n    if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n      const element = newPositionReference.getRootElement();\n      element.parentElement!.insertBefore(placeholder, element);\n      this._activeDraggables.splice(newIndex, 0, item);\n    } else {\n      this.element.nativeElement.appendChild(placeholder);\n      this._activeDraggables.push(item);\n    }\n\n    // The transform needs to be cleared so it doesn't throw off the measurements.\n    placeholder.style.transform = '';\n\n    // Note that the positions were already cached when we called `start` above,\n    // but we need to refresh them since the amount of items has changed.\n    this._cachePositions();\n  }\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: CdkDrag): void {\n    this._reset();\n    this.exited.emit({item, container: this});\n  }\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: CdkDrag): number {\n    if (!this._dragging) {\n      return this._draggables.toArray().indexOf(item);\n    }\n\n    // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n    // The rest of the logic still stands no matter what orientation we're in, however\n    // we need to invert the array when determining the index.\n    const items = this.orientation === 'horizontal' && this._dir && this._dir.value === 'rtl' ?\n        this._positionCache.items.slice().reverse() : this._positionCache.items;\n\n    return findIndex(items, currentItem => currentItem.drag === item);\n  }\n\n  /**\n   * Sorts an item inside the container based on its position.\n   * @param item Item to be sorted.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param pointerDeta Direction in which the pointer is moving along each axis.\n   */\n  _sortItem(item: CdkDrag, pointerX: number, pointerY: number,\n            pointerDelta: {x: number, y: number}): void {\n    // Don't sort the item if it's out of range.\n    if (!this._isPointerNearDropContainer(pointerX, pointerY)) {\n      return;\n    }\n\n    const siblings = this._positionCache.items;\n    const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n\n    if (newIndex === -1 && siblings.length > 0) {\n      return;\n    }\n\n    const isHorizontal = this.orientation === 'horizontal';\n    const currentIndex = findIndex(siblings, currentItem => currentItem.drag === item);\n    const siblingAtNewPosition = siblings[newIndex];\n    const currentPosition = siblings[currentIndex].clientRect;\n    const newPosition = siblingAtNewPosition.clientRect;\n    const delta = currentIndex > newIndex ? 1 : -1;\n\n    this._previousSwap.drag = siblingAtNewPosition.drag;\n    this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n\n    // How many pixels the item's placeholder should be offset.\n    const itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n                                      newPosition.top - currentPosition.top;\n\n    // How many pixels all the other items should be offset.\n    const siblingOffset = isHorizontal ? currentPosition.width * delta :\n                                         currentPosition.height * delta;\n\n    // Save the previous order of the items before moving the item to its new index.\n    // We use this to check whether an item has been moved as a result of the sorting.\n    const oldOrder = siblings.slice();\n\n    // Shuffle the array in place.\n    moveItemInArray(siblings, currentIndex, newIndex);\n\n    siblings.forEach((sibling, index) => {\n      // Don't do anything if the position hasn't changed.\n      if (oldOrder[index] === sibling) {\n        return;\n      }\n\n      const isDraggedItem = sibling.drag === item;\n      const offset = isDraggedItem ? itemOffset : siblingOffset;\n      const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                                              sibling.drag.getRootElement();\n\n      // Update the offset to reflect the new position.\n      sibling.offset += offset;\n\n      // Since we're moving the items with a `transform`, we need to adjust their cached\n      // client rects to reflect their new position, as well as swap their positions in the cache.\n      // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n      // elements may be mid-animation which will give us a wrong result.\n      if (isHorizontal) {\n        elementToOffset.style.transform = `translate3d(${sibling.offset}px, 0, 0)`;\n        this._adjustClientRect(sibling.clientRect, 0, offset);\n      } else {\n        elementToOffset.style.transform = `translate3d(0, ${sibling.offset}px, 0)`;\n        this._adjustClientRect(sibling.clientRect, offset, 0);\n      }\n    });\n  }\n\n  /**\n   * Figures out whether an item should be moved into a sibling\n   * drop container, based on its current position.\n   * @param item Drag item that is being moved.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _getSiblingContainerFromPosition(item: CdkDrag, x: number, y: number): CdkDropList | null {\n    const result = this._positionCache.siblings\n        .find(sibling => isInsideClientRect(sibling.clientRect, x, y));\n\n    return result && result.drop.enterPredicate(item, result.drop) ? result.drop : null;\n  }\n\n  /**\n   * Checks whether an item that started in this container can be returned to it,\n   * after it was moved out into another container.\n   * @param item Item that is being checked.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _canReturnItem(item: CdkDrag, x: number, y: number): boolean {\n    return isInsideClientRect(this._positionCache.self, x, y) && this.enterPredicate(item, this);\n  }\n\n  /** Refreshes the position cache of the items and sibling containers. */\n  private _cachePositions() {\n    const isHorizontal = this.orientation === 'horizontal';\n    this._positionCache.items = this._activeDraggables\n      .map(drag => {\n        const elementToMeasure = this._dragDropRegistry.isDragging(drag) ?\n            // If the element is being dragged, we have to measure the\n            // placeholder, because the element is hidden.\n            drag.getPlaceholderElement() :\n            drag.getRootElement();\n        const clientRect = elementToMeasure.getBoundingClientRect();\n\n        return {\n          drag,\n          offset: 0,\n          // We need to clone the `clientRect` here, because all the values on it are readonly\n          // and we need to be able to update them. Also we can't use a spread here, because\n          // the values on a `ClientRect` aren't own properties. See:\n          // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n          clientRect: {\n            top: clientRect.top,\n            right: clientRect.right,\n            bottom: clientRect.bottom,\n            left: clientRect.left,\n            width: clientRect.width,\n            height: clientRect.height\n          }\n        };\n      })\n      .sort((a, b) => {\n        return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                              a.clientRect.top - b.clientRect.top;\n      });\n\n    this._positionCache.siblings = coerceArray(this.connectedTo)\n      .map(drop => typeof drop === 'string' ? this._dragDropRegistry.getDropContainer(drop)! : drop)\n      .filter(drop => drop && drop !== this)\n      .map(drop => ({drop, clientRect: drop.element.nativeElement.getBoundingClientRect()}));\n\n    this._positionCache.self = this.element.nativeElement.getBoundingClientRect();\n  }\n\n  /** Resets the container to its initial state. */\n  private _reset() {\n    this._dragging = false;\n\n    // TODO(crisbeto): may have to wait for the animations to finish.\n    this._activeDraggables.forEach(item => item.getRootElement().style.transform = '');\n    this._activeDraggables = [];\n    this._positionCache.items = [];\n    this._positionCache.siblings = [];\n    this._previousSwap.drag = null;\n    this._previousSwap.delta = 0;\n  }\n\n  /**\n   * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n   * @param clientRect `ClientRect` that should be updated.\n   * @param top Amount to add to the `top` position.\n   * @param left Amount to add to the `left` position.\n   */\n  private _adjustClientRect(clientRect: ClientRect, top: number, left: number) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n  }\n\n  /**\n   * Gets the index of an item in the drop container, based on the position of the user's pointer.\n   * @param item Item that is being sorted.\n   * @param pointerX Position of the user's pointer along the X axis.\n   * @param pointerY Position of the user's pointer along the Y axis.\n   * @param delta Direction in which the user is moving their pointer.\n   */\n  private _getItemIndexFromPointerPosition(item: CdkDrag, pointerX: number, pointerY: number,\n                                           delta?: {x: number, y: number}) {\n\n    const isHorizontal = this.orientation === 'horizontal';\n\n    return findIndex(this._positionCache.items, ({drag, clientRect}, _, array) => {\n      if (drag === item) {\n        // If there's only one item left in the container, it must be\n        // the dragged item itself so we use it as a reference.\n        return array.length < 2;\n      }\n\n      if (delta) {\n        const direction = isHorizontal ? delta.x : delta.y;\n\n        // If the user is still hovering over the same item as last time, and they didn't change\n        // the direction in which they're dragging, we don't consider it a direction swap.\n        if (drag === this._previousSwap.drag && direction === this._previousSwap.delta) {\n          return false;\n        }\n      }\n\n      return isHorizontal ?\n          // Round these down since most browsers report client rects with\n          // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n          pointerX >= Math.floor(clientRect.left) && pointerX <= Math.floor(clientRect.right) :\n          pointerY >= Math.floor(clientRect.top) && pointerY <= Math.floor(clientRect.bottom);\n    });\n  }\n\n  /**\n   * Checks whether the pointer coordinates are close to the drop container.\n   * @param pointerX Coordinates along the X axis.\n   * @param pointerY Coordinates along the Y axis.\n   */\n  private _isPointerNearDropContainer(pointerX: number, pointerY: number): boolean {\n    const {top, right, bottom, left, width, height} = this._positionCache.self;\n    const xThreshold = width * DROP_PROXIMITY_THRESHOLD;\n    const yThreshold = height * DROP_PROXIMITY_THRESHOLD;\n\n    return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n           pointerX > left - xThreshold && pointerX < right + xThreshold;\n  }\n}\n\n\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.find` which isn't part of the standard Google typings.\n * @param array Array in which to look for matches.\n * @param predicate Function used to determine whether an item is a match.\n */\nfunction findIndex<T>(array: T[],\n                      predicate: (value: T, index: number, obj: T[]) => boolean): number {\n\n  for (let i = 0; i < array.length; i++) {\n    if (predicate(array[i], i, array)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect: ClientRect, x: number, y: number) {\n  const {top, bottom, left, right} = clientRect;\n  return y >= top && y <= bottom && x >= left && x <= right;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkDropList} from './drop-list';\nimport {CdkDrag} from './drag';\nimport {CdkDragHandle} from './drag-handle';\nimport {CdkDragPreview} from './drag-preview';\nimport {CdkDragPlaceholder} from './drag-placeholder';\n\n@NgModule({\n  declarations: [\n    CdkDropList,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  exports: [\n    CdkDropList,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n})\nexport class DragDropModule {}\n"]}