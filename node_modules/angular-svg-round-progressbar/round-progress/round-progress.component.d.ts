import { OnChanges, NgZone, EventEmitter, ElementRef, SimpleChanges } from '@angular/core';
import { RoundProgressService } from './round-progress.service';
import { RoundProgressDefaults } from './round-progress.config';
import { RoundProgressEase } from './round-progress.ease';
import * as ɵngcc0 from '@angular/core';
export declare class RoundProgressComponent implements OnChanges {
    private service;
    private easing;
    private defaults;
    private ngZone;
    /** Reference to the underlying `path` node. */
    path: ElementRef;
    /** Current value of the progress bar. */
    current: number;
    /** Maximum value of the progress bar. */
    max: number;
    /** Radius of the circle. */
    radius: number;
    /** Name of the easing function to use when animating. */
    animation: string;
    /** Time in millisconds by which to delay the animation. */
    animationDelay: number;
    /** Duration of the animation. */
    duration: number;
    /** Width of the circle's stroke. */
    stroke: number;
    /** Color of the circle. */
    color: string;
    /** Background color of the circle. */
    background: string;
    /** Whether the circle should take up the width of its parent. */
    responsive: boolean;
    /** Whether the circle is filling up clockwise. */
    clockwise: boolean;
    /** Whether to render a semicircle. */
    semicircle: boolean;
    /** Whether the tip of the progress should be rounded off. */
    rounded: boolean;
    /** Emits when a new value has been rendered. */
    onRender: EventEmitter<number>;
    private lastAnimationId;
    constructor(service: RoundProgressService, easing: RoundProgressEase, defaults: RoundProgressDefaults, ngZone: NgZone);
    /** Animates a change in the current value. */
    private _animateChange;
    /** Sets the path dimensions. */
    private _setPath;
    /** Clamps a value between the maximum and 0. */
    private _clamp;
    /** Determines the SVG transforms for the <path> node. */
    getPathTransform(): string;
    /** Resolves a color through the service. */
    resolveColor(color: string): string;
    /** Change detection callback. */
    ngOnChanges(changes: SimpleChanges): void;
    /** Diameter of the circle. */
    _getDiameter(): number;
    /** The CSS height of the wrapper element. */
    _getElementHeight(): string;
    /** Viewbox for the SVG element. */
    _getViewBox(): string;
    /** Bottom padding for the wrapper element. */
    _getPaddingBottom(): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<RoundProgressComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<RoundProgressComponent, "round-progress", never, { "radius": "radius"; "animation": "animation"; "animationDelay": "animationDelay"; "duration": "duration"; "stroke": "stroke"; "color": "color"; "background": "background"; "responsive": "responsive"; "clockwise": "clockwise"; "semicircle": "semicircle"; "rounded": "rounded"; "current": "current"; "max": "max"; }, { "onRender": "onRender"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91bmQtcHJvZ3Jlc3MuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInJvdW5kLXByb2dyZXNzLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPbkNoYW5nZXMsIE5nWm9uZSwgRXZlbnRFbWl0dGVyLCBFbGVtZW50UmVmLCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFJvdW5kUHJvZ3Jlc3NTZXJ2aWNlIH0gZnJvbSAnLi9yb3VuZC1wcm9ncmVzcy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgUm91bmRQcm9ncmVzc0RlZmF1bHRzIH0gZnJvbSAnLi9yb3VuZC1wcm9ncmVzcy5jb25maWcnO1xyXG5pbXBvcnQgeyBSb3VuZFByb2dyZXNzRWFzZSB9IGZyb20gJy4vcm91bmQtcHJvZ3Jlc3MuZWFzZSc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFJvdW5kUHJvZ3Jlc3NDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xyXG4gICAgcHJpdmF0ZSBzZXJ2aWNlO1xyXG4gICAgcHJpdmF0ZSBlYXNpbmc7XHJcbiAgICBwcml2YXRlIGRlZmF1bHRzO1xyXG4gICAgcHJpdmF0ZSBuZ1pvbmU7XHJcbiAgICAvKiogUmVmZXJlbmNlIHRvIHRoZSB1bmRlcmx5aW5nIGBwYXRoYCBub2RlLiAqL1xyXG4gICAgcGF0aDogRWxlbWVudFJlZjtcclxuICAgIC8qKiBDdXJyZW50IHZhbHVlIG9mIHRoZSBwcm9ncmVzcyBiYXIuICovXHJcbiAgICBjdXJyZW50OiBudW1iZXI7XHJcbiAgICAvKiogTWF4aW11bSB2YWx1ZSBvZiB0aGUgcHJvZ3Jlc3MgYmFyLiAqL1xyXG4gICAgbWF4OiBudW1iZXI7XHJcbiAgICAvKiogUmFkaXVzIG9mIHRoZSBjaXJjbGUuICovXHJcbiAgICByYWRpdXM6IG51bWJlcjtcclxuICAgIC8qKiBOYW1lIG9mIHRoZSBlYXNpbmcgZnVuY3Rpb24gdG8gdXNlIHdoZW4gYW5pbWF0aW5nLiAqL1xyXG4gICAgYW5pbWF0aW9uOiBzdHJpbmc7XHJcbiAgICAvKiogVGltZSBpbiBtaWxsaXNjb25kcyBieSB3aGljaCB0byBkZWxheSB0aGUgYW5pbWF0aW9uLiAqL1xyXG4gICAgYW5pbWF0aW9uRGVsYXk6IG51bWJlcjtcclxuICAgIC8qKiBEdXJhdGlvbiBvZiB0aGUgYW5pbWF0aW9uLiAqL1xyXG4gICAgZHVyYXRpb246IG51bWJlcjtcclxuICAgIC8qKiBXaWR0aCBvZiB0aGUgY2lyY2xlJ3Mgc3Ryb2tlLiAqL1xyXG4gICAgc3Ryb2tlOiBudW1iZXI7XHJcbiAgICAvKiogQ29sb3Igb2YgdGhlIGNpcmNsZS4gKi9cclxuICAgIGNvbG9yOiBzdHJpbmc7XHJcbiAgICAvKiogQmFja2dyb3VuZCBjb2xvciBvZiB0aGUgY2lyY2xlLiAqL1xyXG4gICAgYmFja2dyb3VuZDogc3RyaW5nO1xyXG4gICAgLyoqIFdoZXRoZXIgdGhlIGNpcmNsZSBzaG91bGQgdGFrZSB1cCB0aGUgd2lkdGggb2YgaXRzIHBhcmVudC4gKi9cclxuICAgIHJlc3BvbnNpdmU6IGJvb2xlYW47XHJcbiAgICAvKiogV2hldGhlciB0aGUgY2lyY2xlIGlzIGZpbGxpbmcgdXAgY2xvY2t3aXNlLiAqL1xyXG4gICAgY2xvY2t3aXNlOiBib29sZWFuO1xyXG4gICAgLyoqIFdoZXRoZXIgdG8gcmVuZGVyIGEgc2VtaWNpcmNsZS4gKi9cclxuICAgIHNlbWljaXJjbGU6IGJvb2xlYW47XHJcbiAgICAvKiogV2hldGhlciB0aGUgdGlwIG9mIHRoZSBwcm9ncmVzcyBzaG91bGQgYmUgcm91bmRlZCBvZmYuICovXHJcbiAgICByb3VuZGVkOiBib29sZWFuO1xyXG4gICAgLyoqIEVtaXRzIHdoZW4gYSBuZXcgdmFsdWUgaGFzIGJlZW4gcmVuZGVyZWQuICovXHJcbiAgICBvblJlbmRlcjogRXZlbnRFbWl0dGVyPG51bWJlcj47XHJcbiAgICBwcml2YXRlIGxhc3RBbmltYXRpb25JZDtcclxuICAgIGNvbnN0cnVjdG9yKHNlcnZpY2U6IFJvdW5kUHJvZ3Jlc3NTZXJ2aWNlLCBlYXNpbmc6IFJvdW5kUHJvZ3Jlc3NFYXNlLCBkZWZhdWx0czogUm91bmRQcm9ncmVzc0RlZmF1bHRzLCBuZ1pvbmU6IE5nWm9uZSk7XHJcbiAgICAvKiogQW5pbWF0ZXMgYSBjaGFuZ2UgaW4gdGhlIGN1cnJlbnQgdmFsdWUuICovXHJcbiAgICBwcml2YXRlIF9hbmltYXRlQ2hhbmdlO1xyXG4gICAgLyoqIFNldHMgdGhlIHBhdGggZGltZW5zaW9ucy4gKi9cclxuICAgIHByaXZhdGUgX3NldFBhdGg7XHJcbiAgICAvKiogQ2xhbXBzIGEgdmFsdWUgYmV0d2VlbiB0aGUgbWF4aW11bSBhbmQgMC4gKi9cclxuICAgIHByaXZhdGUgX2NsYW1wO1xyXG4gICAgLyoqIERldGVybWluZXMgdGhlIFNWRyB0cmFuc2Zvcm1zIGZvciB0aGUgPHBhdGg+IG5vZGUuICovXHJcbiAgICBnZXRQYXRoVHJhbnNmb3JtKCk6IHN0cmluZztcclxuICAgIC8qKiBSZXNvbHZlcyBhIGNvbG9yIHRocm91Z2ggdGhlIHNlcnZpY2UuICovXHJcbiAgICByZXNvbHZlQ29sb3IoY29sb3I6IHN0cmluZyk6IHN0cmluZztcclxuICAgIC8qKiBDaGFuZ2UgZGV0ZWN0aW9uIGNhbGxiYWNrLiAqL1xyXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XHJcbiAgICAvKiogRGlhbWV0ZXIgb2YgdGhlIGNpcmNsZS4gKi9cclxuICAgIF9nZXREaWFtZXRlcigpOiBudW1iZXI7XHJcbiAgICAvKiogVGhlIENTUyBoZWlnaHQgb2YgdGhlIHdyYXBwZXIgZWxlbWVudC4gKi9cclxuICAgIF9nZXRFbGVtZW50SGVpZ2h0KCk6IHN0cmluZztcclxuICAgIC8qKiBWaWV3Ym94IGZvciB0aGUgU1ZHIGVsZW1lbnQuICovXHJcbiAgICBfZ2V0Vmlld0JveCgpOiBzdHJpbmc7XHJcbiAgICAvKiogQm90dG9tIHBhZGRpbmcgZm9yIHRoZSB3cmFwcGVyIGVsZW1lbnQuICovXHJcbiAgICBfZ2V0UGFkZGluZ0JvdHRvbSgpOiBzdHJpbmc7XHJcbn1cclxuIl19