import { Component, Input, Output, NgZone, EventEmitter, ViewChild, Inject, ChangeDetectionStrategy, } from '@angular/core';
import { RoundProgressService } from './round-progress.service';
import { ROUND_PROGRESS_DEFAULTS } from './round-progress.config';
import { RoundProgressEase } from './round-progress.ease';
export class RoundProgressComponent {
    constructor(service, easing, defaults, ngZone) {
        this.service = service;
        this.easing = easing;
        this.defaults = defaults;
        this.ngZone = ngZone;
        /** Radius of the circle. */
        this.radius = this.defaults.radius;
        /** Name of the easing function to use when animating. */
        this.animation = this.defaults.animation;
        /** Time in millisconds by which to delay the animation. */
        this.animationDelay = this.defaults.animationDelay;
        /** Duration of the animation. */
        this.duration = this.defaults.duration;
        /** Width of the circle's stroke. */
        this.stroke = this.defaults.stroke;
        /** Color of the circle. */
        this.color = this.defaults.color;
        /** Background color of the circle. */
        this.background = this.defaults.background;
        /** Whether the circle should take up the width of its parent. */
        this.responsive = this.defaults.responsive;
        /** Whether the circle is filling up clockwise. */
        this.clockwise = this.defaults.clockwise;
        /** Whether to render a semicircle. */
        this.semicircle = this.defaults.semicircle;
        /** Whether the tip of the progress should be rounded off. */
        this.rounded = this.defaults.rounded;
        /** Emits when a new value has been rendered. */
        this.onRender = new EventEmitter();
        this.lastAnimationId = 0;
    }
    /** Animates a change in the current value. */
    _animateChange(from, to) {
        if (typeof from !== 'number') {
            from = 0;
        }
        to = this._clamp(to);
        from = this._clamp(from);
        const self = this;
        const changeInValue = to - from;
        const duration = self.duration;
        // Avoid firing change detection for each of the animation frames.
        self.ngZone.runOutsideAngular(() => {
            const start = () => {
                const startTime = self.service.getTimestamp();
                const id = ++self.lastAnimationId;
                requestAnimationFrame(function animation() {
                    const currentTime = Math.min(self.service.getTimestamp() - startTime, duration);
                    const value = self.easing[self.animation](currentTime, from, changeInValue, duration);
                    self._setPath(value);
                    self.onRender.emit(value);
                    if (id === self.lastAnimationId && currentTime < duration) {
                        requestAnimationFrame(animation);
                    }
                });
            };
            if (this.animationDelay > 0) {
                setTimeout(start, this.animationDelay);
            }
            else {
                start();
            }
        });
    }
    /** Sets the path dimensions. */
    _setPath(value) {
        if (this.path) {
            const arc = this.service.getArc(value, this.max, this.radius - this.stroke / 2, this.radius, this.semicircle);
            this.path.nativeElement.setAttribute('d', arc);
        }
    }
    /** Clamps a value between the maximum and 0. */
    _clamp(value) {
        return Math.max(0, Math.min(value || 0, this.max));
    }
    /** Determines the SVG transforms for the <path> node. */
    getPathTransform() {
        const diameter = this._getDiameter();
        if (this.semicircle) {
            return this.clockwise
                ? `translate(0, ${diameter}) rotate(-90)`
                : `translate(${diameter + ',' + diameter}) rotate(90) scale(-1, 1)`;
        }
        else if (!this.clockwise) {
            return `scale(-1, 1) translate(-${diameter} 0)`;
        }
    }
    /** Resolves a color through the service. */
    resolveColor(color) {
        return this.service.resolveColor(color);
    }
    /** Change detection callback. */
    ngOnChanges(changes) {
        if (changes.current) {
            this._animateChange(changes.current.previousValue, changes.current.currentValue);
        }
        else {
            this._setPath(this.current);
        }
    }
    /** Diameter of the circle. */
    _getDiameter() {
        return this.radius * 2;
    }
    /** The CSS height of the wrapper element. */
    _getElementHeight() {
        if (!this.responsive) {
            return (this.semicircle ? this.radius : this._getDiameter()) + 'px';
        }
    }
    /** Viewbox for the SVG element. */
    _getViewBox() {
        const diameter = this._getDiameter();
        return `0 0 ${diameter} ${this.semicircle ? this.radius : diameter}`;
    }
    /** Bottom padding for the wrapper element. */
    _getPaddingBottom() {
        if (this.responsive) {
            return this.semicircle ? '50%' : '100%';
        }
    }
}
RoundProgressComponent.decorators = [
    { type: Component, args: [{
                selector: 'round-progress',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: "<svg xmlns=\"http://www.w3.org/2000/svg\" [attr.viewBox]=\"_getViewBox()\">\n  <circle\n    fill=\"none\"\n    [attr.cx]=\"radius\"\n    [attr.cy]=\"radius\"\n    [attr.r]=\"radius - stroke / 2\"\n    [style.stroke]=\"resolveColor(background)\"\n    [style.stroke-width]=\"stroke\"/>\n\n  <path\n    #path\n    fill=\"none\"\n    [style.stroke-width]=\"stroke\"\n    [style.stroke]=\"resolveColor(color)\"\n    [style.stroke-linecap]=\"rounded ? 'round' : ''\"\n    [attr.transform]=\"getPathTransform()\"/>\n</svg>\n",
                host: {
                    role: 'progressbar',
                    '[attr.aria-valuemin]': '0',
                    '[attr.aria-valuemax]': 'max',
                    '[attr.aria-valuenow]': 'current',
                    '[style.width]': 'responsive ? "" : _getDiameter() + "px"',
                    '[style.height]': '_getElementHeight()',
                    '[style.padding-bottom]': '_getPaddingBottom()',
                    '[class.responsive]': 'responsive',
                },
                styles: [":host{display:block;overflow:hidden;position:relative}:host(.responsive){padding-bottom:100%;width:100%}:host(.responsive)>svg{height:100%;left:0;position:absolute;top:0;width:100%}"]
            },] }
];
RoundProgressComponent.ctorParameters = () => [
    { type: RoundProgressService },
    { type: RoundProgressEase },
    { type: undefined, decorators: [{ type: Inject, args: [ROUND_PROGRESS_DEFAULTS,] }] },
    { type: NgZone }
];
RoundProgressComponent.propDecorators = {
    path: [{ type: ViewChild, args: ['path',] }],
    current: [{ type: Input }],
    max: [{ type: Input }],
    radius: [{ type: Input }],
    animation: [{ type: Input }],
    animationDelay: [{ type: Input }],
    duration: [{ type: Input }],
    stroke: [{ type: Input }],
    color: [{ type: Input }],
    background: [{ type: Input }],
    responsive: [{ type: Input }],
    clockwise: [{ type: Input }],
    semicircle: [{ type: Input }],
    rounded: [{ type: Input }],
    onRender: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91bmQtcHJvZ3Jlc3MuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi9yb3VuZC1wcm9ncmVzcy9yb3VuZC1wcm9ncmVzcy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxLQUFLLEVBQ0wsTUFBTSxFQUVOLE1BQU0sRUFDTixZQUFZLEVBQ1osU0FBUyxFQUNULE1BQU0sRUFHTix1QkFBdUIsR0FDeEIsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDOUQsT0FBTyxFQUFDLHVCQUF1QixFQUF3QixNQUFNLHlCQUF5QixDQUFDO0FBQ3ZGLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBa0J4RCxNQUFNLE9BQU8sc0JBQXNCO0lBZ0RqQyxZQUNVLE9BQTZCLEVBQzdCLE1BQXlCLEVBQ1EsUUFBK0IsRUFDaEUsTUFBYztRQUhkLFlBQU8sR0FBUCxPQUFPLENBQXNCO1FBQzdCLFdBQU0sR0FBTixNQUFNLENBQW1CO1FBQ1EsYUFBUSxHQUFSLFFBQVEsQ0FBdUI7UUFDaEUsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQTFDeEIsNEJBQTRCO1FBQ25CLFdBQU0sR0FBVyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztRQUUvQyx5REFBeUQ7UUFDaEQsY0FBUyxHQUFXLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDO1FBRXJELDJEQUEyRDtRQUNsRCxtQkFBYyxHQUFXLElBQUksQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDO1FBRS9ELGlDQUFpQztRQUN4QixhQUFRLEdBQVcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUM7UUFFbkQsb0NBQW9DO1FBQzNCLFdBQU0sR0FBVyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztRQUUvQywy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QVk7aUJBQ25DOzthQUNGOzs7WUFuQk8sb0JBQW9CO1lBRXBCLGlCQUFpQjs0Q0FxRXBCLE1BQU0sU0FBQyx1QkFBdUI7WUFoRmpDLE1BQU07OzttQkErQkwsU0FBUyxTQUFDLE1BQU07c0JBR2hCLEtBQUs7a0JBR0wsS0FBSztxQkFHTCxLQUFLO3dCQUdMLEtBQUs7NkJBR0wsS0FBSzt1QkFHTCxLQUFLO3FCQUdMLEtBQUs7b0JBR0wsS0FBSzt5QkFHTCxLQUFLO3lCQUdMLEtBQUs7d0JBR0wsS0FBSzt5QkFHTCxLQUFLO3NCQUdMLEtBQUs7dUJBR0wsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgSW5wdXQsXG4gIE91dHB1dCxcbiAgT25DaGFuZ2VzLFxuICBOZ1pvbmUsXG4gIEV2ZW50RW1pdHRlcixcbiAgVmlld0NoaWxkLFxuICBJbmplY3QsXG4gIEVsZW1lbnRSZWYsXG4gIFNpbXBsZUNoYW5nZXMsXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHtSb3VuZFByb2dyZXNzU2VydmljZX0gZnJvbSAnLi9yb3VuZC1wcm9ncmVzcy5zZXJ2aWNlJztcbmltcG9ydCB7Uk9VTkRfUFJPR1JFU1NfREVGQVVMVFMsIFJvdW5kUHJvZ3Jlc3NEZWZhdWx0c30gZnJvbSAnLi9yb3VuZC1wcm9ncmVzcy5jb25maWcnO1xuaW1wb3J0IHtSb3VuZFByb2dyZXNzRWFzZX0gZnJvbSAnLi9yb3VuZC1wcm9ncmVzcy5lYXNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncm91bmQtcHJvZ3Jlc3MnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGVVcmw6ICcuL3JvdW5kLXByb2dyZXNzLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vcm91bmQtcHJvZ3Jlc3MuY29tcG9uZW50LmNzcyddLFxuICBob3N0OiB7XG4gICAgcm9sZTogJ3Byb2dyZXNzYmFyJyxcbiAgICAnW2F0dHIuYXJpYS12YWx1ZW1pbl0nOiAnMCcsXG4gICAgJ1thdHRyLmFyaWEtdmFsdWVtYXhdJzogJ21heCcsXG4gICAgJ1thdHRyLmFyaWEtdmFsdWVub3ddJzogJ2N1cnJlbnQnLFxuICAgICdbc3R5bGUud2lkdGhdJzogJ3Jlc3BvbnNpdmUgPyBcIlwiIDogX2dldERpYW1ldGVyKCkgKyBcInB4XCInLFxuICAgICdbc3R5bGUuaGVpZ2h0XSc6ICdfZ2V0RWxlbWVudEhlaWdodCgpJyxcbiAgICAnW3N0eWxlLnBhZGRpbmctYm90dG9tXSc6ICdfZ2V0UGFkZGluZ0JvdHRvbSgpJyxcbiAgICAnW2NsYXNzLnJlc3BvbnNpdmVdJzogJ3Jlc3BvbnNpdmUnLFxuICB9XG59KVxuZXhwb3J0IGNsYXNzIFJvdW5kUHJvZ3Jlc3NDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuICAvKiogUmVmZXJlbmNlIHRvIHRoZSB1bmRlcmx5aW5nIGBwYXRoYCBub2RlLiAqL1xuICBAVmlld0NoaWxkKCdwYXRoJykgcGF0aDogRWxlbWVudFJlZjtcblxuICAvKiogQ3VycmVudCB2YWx1ZSBvZiB0aGUgcHJvZ3Jlc3MgYmFyLiAqL1xuICBASW5wdXQoKSBjdXJyZW50OiBudW1iZXI7XG5cbiAgLyoqIE1heGltdW0gdmFsdWUgb2YgdGhlIHByb2dyZXNzIGJhci4gKi9cbiAgQElucHV0KCkgbWF4OiBudW1iZXI7XG5cbiAgLyoqIFJhZGl1cyBvZiB0aGUgY2lyY2xlLiAqL1xuICBASW5wdXQoKSByYWRpdXM6IG51bWJlciA9IHRoaXMuZGVmYXVsdHMucmFkaXVzO1xuXG4gIC8qKiBOYW1lIG9mIHRoZSBlYXNpbmcgZnVuY3Rpb24gdG8gdXNlIHdoZW4gYW5pbWF0aW5nLiAqL1xuICBASW5wdXQoKSBhbmltYXRpb246IHN0cmluZyA9IHRoaXMuZGVmYXVsdHMuYW5pbWF0aW9uO1xuXG4gIC8qKiBUaW1lIGluIG1pbGxpc2NvbmRzIGJ5IHdoaWNoIHRvIGRlbGF5IHRoZSBhbmltYXRpb24uICovXG4gIEBJbnB1dCgpIGFuaW1hdGlvbkRlbGF5OiBudW1iZXIgPSB0aGlzLmRlZmF1bHRzLmFuaW1hdGlvbkRlbGF5O1xuXG4gIC8qKiBEdXJhdGlvbiBvZiB0aGUgYW5pbWF0aW9uLiAqL1xuICBASW5wdXQoKSBkdXJhdGlvbjogbnVtYmVyID0gdGhpcy5kZWZhdWx0cy5kdXJhdGlvbjtcblxuICAvKiogV2lkdGggb2YgdGhlIGNpcmNsZSdzIHN0cm9rZS4gKi9cbiAgQElucHV0KCkgc3Ryb2tlOiBudW1iZXIgPSB0aGlzLmRlZmF1bHRzLnN0cm9rZTtcblxuICAvKiogQ29sb3Igb2YgdGhlIGNpcmNsZS4gKi9cbiAgQElucHV0KCkgY29sb3I6IHN0cmluZyA9IHRoaXMuZGVmYXVsdHMuY29sb3I7XG5cbiAgLyoqIEJhY2tncm91bmQgY29sb3Igb2YgdGhlIGNpcmNsZS4gKi9cbiAgQElucHV0KCkgYmFja2dyb3VuZDogc3RyaW5nID0gdGhpcy5kZWZhdWx0cy5iYWNrZ3JvdW5kO1xuXG4gIC8qKiBXaGV0aGVyIHRoZSBjaXJjbGUgc2hvdWxkIHRha2UgdXAgdGhlIHdpZHRoIG9mIGl0cyBwYXJlbnQuICovXG4gIEBJbnB1dCgpIHJlc3BvbnNpdmU6IGJvb2xlYW4gPSB0aGlzLmRlZmF1bHRzLnJlc3BvbnNpdmU7XG5cbiAgLyoqIFdoZXRoZXIgdGhlIGNpcmNsZSBpcyBmaWxsaW5nIHVwIGNsb2Nrd2lzZS4gKi9cbiAgQElucHV0KCkgY2xvY2t3aXNlOiBib29sZWFuID0gdGhpcy5kZWZhdWx0cy5jbG9ja3dpc2U7XG5cbiAgLyoqIFdoZXRoZXIgdG8gcmVuZGVyIGEgc2VtaWNpcmNsZS4gKi9cbiAgQElucHV0KCkgc2VtaWNpcmNsZTogYm9vbGVhbiA9IHRoaXMuZGVmYXVsdHMuc2VtaWNpcmNsZTtcblxuICAvKiogV2hldGhlciB0aGUgdGlwIG9mIHRoZSBwcm9ncmVzcyBzaG91bGQgYmUgcm91bmRlZCBvZmYuICovXG4gIEBJbnB1dCgpIHJvdW5kZWQ6IGJvb2xlYW4gPSB0aGlzLmRlZmF1bHRzLnJvdW5kZWQ7XG5cbiAgLyoqIEVtaXRzIHdoZW4gYSBuZXcgdmFsdWUgaGFzIGJlZW4gcmVuZGVyZWQuICovXG4gIEBPdXRwdXQoKSBvblJlbmRlcjogRXZlbnRFbWl0dGVyPG51bWJlcj4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgcHJpdmF0ZSBsYXN0QW5pbWF0aW9uSWQgPSAwO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgc2VydmljZTogUm91bmRQcm9ncmVzc1NlcnZpY2UsXG4gICAgcHJpdmF0ZSBlYXNpbmc6IFJvdW5kUHJvZ3Jlc3NFYXNlLFxuICAgIEBJbmplY3QoUk9VTkRfUFJPR1JFU1NfREVGQVVMVFMpIHByaXZhdGUgZGVmYXVsdHM6IFJvdW5kUHJvZ3Jlc3NEZWZhdWx0cyxcbiAgICBwcml2YXRlIG5nWm9uZTogTmdab25lXG4gICkge31cblxuICAvKiogQW5pbWF0ZXMgYSBjaGFuZ2UgaW4gdGhlIGN1cnJlbnQgdmFsdWUuICovXG4gIHByaXZhdGUgX2FuaW1hdGVDaGFuZ2UoZnJvbTogbnVtYmVyLCB0bzogbnVtYmVyKTogdm9pZCB7XG4gICAgaWYgKHR5cGVvZiBmcm9tICE9PSAnbnVtYmVyJykge1xuICAgICAgZnJvbSA9IDA7XG4gICAgfVxuXG4gICAgdG8gPSB0aGlzLl9jbGFtcCh0byk7XG4gICAgZnJvbSA9IHRoaXMuX2NsYW1wKGZyb20pO1xuXG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgY29uc3QgY2hhbmdlSW5WYWx1ZSA9IHRvIC0gZnJvbTtcbiAgICBjb25zdCBkdXJhdGlvbiA9IHNlbGYuZHVyYXRpb247XG5cbiAgICAvLyBBdm9pZCBmaXJpbmcgY2hhbmdlIGRldGVjdGlvbiBmb3IgZWFjaCBvZiB0aGUgYW5pbWF0aW9uIGZyYW1lcy5cbiAgICBzZWxmLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICBjb25zdCBzdGFydCA9ICgpID0+IHtcbiAgICAgICAgY29uc3Qgc3RhcnRUaW1lID0gc2VsZi5zZXJ2aWNlLmdldFRpbWVzdGFtcCgpO1xuICAgICAgICBjb25zdCBpZCA9ICsrc2VsZi5sYXN0QW5pbWF0aW9uSWQ7XG5cbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uIGFuaW1hdGlvbigpIHtcbiAgICAgICAgICBjb25zdCBjdXJyZW50VGltZSA9IE1hdGgubWluKHNlbGYuc2VydmljZS5nZXRUaW1lc3RhbXAoKSAtIHN0YXJ0VGltZSwgZHVyYXRpb24pO1xuICAgICAgICAgIGNvbnN0IHZhbHVlID0gc2VsZi5lYXNpbmdbc2VsZi5hbmltYXRpb25dKGN1cnJlbnRUaW1lLCBmcm9tLCBjaGFuZ2VJblZhbHVlLCBkdXJhdGlvbik7XG5cbiAgICAgICAgICBzZWxmLl9zZXRQYXRoKHZhbHVlKTtcbiAgICAgICAgICBzZWxmLm9uUmVuZGVyLmVtaXQodmFsdWUpO1xuXG4gICAgICAgICAgaWYgKGlkID09PSBzZWxmLmxhc3RBbmltYXRpb25JZCAmJiBjdXJyZW50VGltZSA8IGR1cmF0aW9uKSB7XG4gICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0aW9uKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMuYW5pbWF0aW9uRGVsYXkgPiAwKSB7XG4gICAgICAgIHNldFRpbWVvdXQoc3RhcnQsIHRoaXMuYW5pbWF0aW9uRGVsYXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhcnQoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKiBTZXRzIHRoZSBwYXRoIGRpbWVuc2lvbnMuICovXG4gIHByaXZhdGUgX3NldFBhdGgodmFsdWU6IG51bWJlcik6IHZvaWQge1xuICAgIGlmICh0aGlzLnBhdGgpIHtcbiAgICAgIGNvbnN0IGFyYyA9IHRoaXMuc2VydmljZS5nZXRBcmModmFsdWUsIHRoaXMubWF4LCB0aGlzLnJhZGl1cyAtIHRoaXMuc3Ryb2tlIC8gMiwgdGhpcy5yYWRpdXMsIHRoaXMuc2VtaWNpcmNsZSk7XG4gICAgICB0aGlzLnBhdGgubmF0aXZlRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2QnLCBhcmMpO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBDbGFtcHMgYSB2YWx1ZSBiZXR3ZWVuIHRoZSBtYXhpbXVtIGFuZCAwLiAqL1xuICBwcml2YXRlIF9jbGFtcCh2YWx1ZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5taW4odmFsdWUgfHwgMCwgdGhpcy5tYXgpKTtcbiAgfVxuXG4gIC8qKiBEZXRlcm1pbmVzIHRoZSBTVkcgdHJhbnNmb3JtcyBmb3IgdGhlIDxwYXRoPiBub2RlLiAqL1xuICBnZXRQYXRoVHJhbnNmb3JtKCk6IHN0cmluZyB7XG4gICAgY29uc3QgZGlhbWV0ZXIgPSB0aGlzLl9nZXREaWFtZXRlcigpO1xuXG4gICAgaWYgKHRoaXMuc2VtaWNpcmNsZSkge1xuICAgICAgcmV0dXJuIHRoaXMuY2xvY2t3aXNlXG4gICAgICAgID8gYHRyYW5zbGF0ZSgwLCAke2RpYW1ldGVyfSkgcm90YXRlKC05MClgXG4gICAgICAgIDogYHRyYW5zbGF0ZSgke2RpYW1ldGVyICsgJywnICsgZGlhbWV0ZXJ9KSByb3RhdGUoOTApIHNjYWxlKC0xLCAxKWA7XG4gICAgfSBlbHNlIGlmICghdGhpcy5jbG9ja3dpc2UpIHtcbiAgICAgIHJldHVybiBgc2NhbGUoLTEsIDEpIHRyYW5zbGF0ZSgtJHtkaWFtZXRlcn0gMClgO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBSZXNvbHZlcyBhIGNvbG9yIHRocm91Z2ggdGhlIHNlcnZpY2UuICovXG4gIHJlc29sdmVDb2xvcihjb2xvcjogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5zZXJ2aWNlLnJlc29sdmVDb2xvcihjb2xvcik7XG4gIH1cblxuICAvKiogQ2hhbmdlIGRldGVjdGlvbiBjYWxsYmFjay4gKi9cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIGlmIChjaGFuZ2VzLmN1cnJlbnQpIHtcbiAgICAgIHRoaXMuX2FuaW1hdGVDaGFuZ2UoY2hhbmdlcy5jdXJyZW50LnByZXZpb3VzVmFsdWUsIGNoYW5nZXMuY3VycmVudC5jdXJyZW50VmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9zZXRQYXRoKHRoaXMuY3VycmVudCk7XG4gICAgfVxuICB9XG5cbiAgLyoqIERpYW1ldGVyIG9mIHRoZSBjaXJjbGUuICovXG4gIF9nZXREaWFtZXRlcigpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnJhZGl1cyAqIDI7XG4gIH1cblxuICAvKiogVGhlIENTUyBoZWlnaHQgb2YgdGhlIHdyYXBwZXIgZWxlbWVudC4gKi9cbiAgX2dldEVsZW1lbnRIZWlnaHQoKTogc3RyaW5nIHtcbiAgICBpZiAoIXRoaXMucmVzcG9uc2l2ZSkge1xuICAgICAgcmV0dXJuICh0aGlzLnNlbWljaXJjbGUgPyB0aGlzLnJhZGl1cyA6IHRoaXMuX2dldERpYW1ldGVyKCkpICsgJ3B4JztcbiAgICB9XG4gIH1cblxuICAvKiogVmlld2JveCBmb3IgdGhlIFNWRyBlbGVtZW50LiAqL1xuICBfZ2V0Vmlld0JveCgpOiBzdHJpbmcge1xuICAgIGNvbnN0IGRpYW1ldGVyID0gdGhpcy5fZ2V0RGlhbWV0ZXIoKTtcbiAgICByZXR1cm4gYDAgMCAke2RpYW1ldGVyfSAke3RoaXMuc2VtaWNpcmNsZSA/IHRoaXMucmFkaXVzIDogZGlhbWV0ZXJ9YDtcbiAgfVxuXG4gIC8qKiBCb3R0b20gcGFkZGluZyBmb3IgdGhlIHdyYXBwZXIgZWxlbWVudC4gKi9cbiAgX2dldFBhZGRpbmdCb3R0b20oKTogc3RyaW5nIHtcbiAgICBpZiAodGhpcy5yZXNwb25zaXZlKSB7XG4gICAgICByZXR1cm4gdGhpcy5zZW1pY2lyY2xlID8gJzUwJScgOiAnMTAwJSc7XG4gICAgfVxuICB9XG59XG4iXX0=