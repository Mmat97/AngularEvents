import { Injectable, Inject, Optional } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
const DEGREE_IN_RADIANS = Math.PI / 180;
export class RoundProgressService {
    constructor(document) {
        this.supportsSvg = !!(document &&
            document.createElementNS &&
            document.createElementNS('http://www.w3.org/2000/svg', 'svg').createSVGRect);
        this.base = document && document.head.querySelector('base');
        this.hasPerf =
            typeof window !== 'undefined' &&
                window.performance &&
                window.performance.now &&
                typeof window.performance.now() === 'number';
    }
    /**
     * Resolves a SVG color against the page's `base` tag.
     */
    resolveColor(color) {
        if (this.base && this.base.href) {
            const hashIndex = color.indexOf('#');
            if (hashIndex > -1 && color.indexOf('url') > -1) {
                return color.slice(0, hashIndex) + location.href + color.slice(hashIndex);
            }
        }
        return color;
    }
    /**
     * Generates a timestamp.
     */
    getTimestamp() {
        return this.hasPerf ? window.performance.now() : Date.now();
    }
    /**
     * Generates the value for an SVG arc.
     * @param current       Current value.
     * @param total         Maximum value.
     * @param pathRadius    Radius of the SVG path.
     * @param elementRadius Radius of the SVG container.
     * @param isSemicircle  Whether the element should be a semicircle.
     */
    getArc(current, total, pathRadius, elementRadius, isSemicircle = false) {
        const value = Math.max(0, Math.min(current || 0, total));
        const maxAngle = isSemicircle ? 180 : 359.9999;
        const percentage = total === 0 ? maxAngle : (value / total) * maxAngle;
        const start = this._polarToCartesian(elementRadius, pathRadius, percentage);
        const end = this._polarToCartesian(elementRadius, pathRadius, 0);
        const arcSweep = percentage <= 180 ? 0 : 1;
        return `M ${start} A ${pathRadius} ${pathRadius} 0 ${arcSweep} 0 ${end}`;
    }
    /**
     * Converts polar cooradinates to Cartesian.
     * @param elementRadius  Radius of the wrapper element.
     * @param pathRadius     Radius of the path being described.
     * @param angleInDegrees Degree to be converted.
     */
    _polarToCartesian(elementRadius, pathRadius, angleInDegrees) {
        const angleInRadians = (angleInDegrees - 90) * DEGREE_IN_RADIANS;
        const x = elementRadius + pathRadius * Math.cos(angleInRadians);
        const y = elementRadius + pathRadius * Math.sin(angleInRadians);
        return x + ' ' + y;
    }
}
RoundProgressService.ɵprov = i0.ɵɵdefineInjectable({ factory: function RoundProgressService_Factory() { return new RoundProgressService(i0.ɵɵinject(i1.DOCUMENT, 8)); }, token: RoundProgressService, providedIn: "root" });
RoundProgressService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
RoundProgressService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91bmQtcHJvZ3Jlc3Muc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvcm91bmQtcHJvZ3Jlc3Mvcm91bmQtcHJvZ3Jlc3Muc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDM0QsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGlCQUFpQixDQUFDOzs7QUFFekMsTUFBTSxpQkFBaUIsR0FBVyxJQUFJLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQztBQUdoRCxNQUFNLE9BQU8sb0JBQW9CO0lBSy9CLFlBQTBDLFFBQWE7UUFDckQsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUMsQ0FDbkIsUUFBUTtZQUNSLFFBQVEsQ0FBQyxlQUFlO1lBQ3hCLFFBQVEsQ0FBQyxlQUFlLENBQUMsNEJBQTRCLEVBQUUsS0FBSyxDQUFDLENBQUMsYUFBYSxDQUM1RSxDQUFDO1FBRUYsSUFBSSxDQUFDLElBQUksR0FBRyxRQUFRLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDNUQsSUFBSSxDQUFDLE9BQU87WUFDVixPQUFPLE1BQU0sS0FBSyxXQUFXO2dCQUM3QixNQUFNLENBQUMsV0FBVztnQkFDbEIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHO2dCQUN0QixPQUFPLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLEtBQUssUUFBUSxDQUFDO0lBQ2pELENBQUM7SUFFRDs7T0FFRztJQUNILFlBQVksQ0FBQyxLQUFhO1FBQ3hCLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRTtZQUMvQixNQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBRXJDLElBQUksU0FBUyxHQUFHLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7Z0JBQy9DLE9BQU8sS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLEdBQUcsUUFBUSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO2FBQzNFO1NBQ0Y7UUFFRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFRDs7T0FFRztJQUNILFlBQVk7UUFDVixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUM5RCxDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNILE1BQU0sQ0FBQyxPQUFlLEVBQUUsS0FBYSxFQUFFLFVBQWtCLEVBQUUsYUFBcUIsRUFBRSxZQUFZLEdBQUcsS0FBSztRQUNwRyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sSUFBSSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUN6RCxNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO1FBQy9DLE1BQU0sVUFBVSxHQUFHLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsUUFBUSxDQUFDO1FBQ3ZFLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLEVBQUUsVUFBVSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQzVFLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2pFLE1BQU0sUUFBUSxHQUFHLFVBQVUsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRTNDLE9BQU8sS0FBSyxLQUFLLE1BQU0sVUFBVSxJQUFJLFVBQVUsTUFBTSxRQUFRLE1BQU0sR0FBRyxFQUFFLENBQUM7SUFDM0UsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ssaUJBQWlCLENBQUMsYUFBcUIsRUFBRSxVQUFrQixFQUFFLGNBQXNCO1FBQ3pGLE1BQU0sY0FBYyxHQUFHLENBQUMsY0FBYyxHQUFHLEVBQUUsQ0FBQyxHQUFHLGlCQUFpQixDQUFDO1FBQ2pFLE1BQU0sQ0FBQyxHQUFHLGFBQWEsR0FBRyxVQUFVLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUNoRSxNQUFNLENBQUMsR0FBRyxhQUFhLEdBQUcsVUFBVSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUM7UUFFaEUsT0FBTyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQztJQUNyQixDQUFDOzs7O1lBMUVGLFVBQVUsU0FBQyxFQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUM7Ozs0Q0FNakIsUUFBUSxZQUFJLE1BQU0sU0FBQyxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlLCBJbmplY3QsIE9wdGlvbmFsfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7RE9DVU1FTlR9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbmNvbnN0IERFR1JFRV9JTl9SQURJQU5TOiBudW1iZXIgPSBNYXRoLlBJIC8gMTgwO1xuXG5ASW5qZWN0YWJsZSh7cHJvdmlkZWRJbjogJ3Jvb3QnfSlcbmV4cG9ydCBjbGFzcyBSb3VuZFByb2dyZXNzU2VydmljZSB7XG4gIHByaXZhdGUgYmFzZTogSFRNTEJhc2VFbGVtZW50O1xuICBwcml2YXRlIGhhc1BlcmY6IGJvb2xlYW47XG4gIHB1YmxpYyBzdXBwb3J0c1N2ZzogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBASW5qZWN0KERPQ1VNRU5UKSBkb2N1bWVudDogYW55KSB7XG4gICAgdGhpcy5zdXBwb3J0c1N2ZyA9ICEhKFxuICAgICAgZG9jdW1lbnQgJiZcbiAgICAgIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyAmJlxuICAgICAgZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdzdmcnKS5jcmVhdGVTVkdSZWN0XG4gICAgKTtcblxuICAgIHRoaXMuYmFzZSA9IGRvY3VtZW50ICYmIGRvY3VtZW50LmhlYWQucXVlcnlTZWxlY3RvcignYmFzZScpO1xuICAgIHRoaXMuaGFzUGVyZiA9XG4gICAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgd2luZG93LnBlcmZvcm1hbmNlICYmXG4gICAgICB3aW5kb3cucGVyZm9ybWFuY2Uubm93ICYmXG4gICAgICB0eXBlb2Ygd2luZG93LnBlcmZvcm1hbmNlLm5vdygpID09PSAnbnVtYmVyJztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNvbHZlcyBhIFNWRyBjb2xvciBhZ2FpbnN0IHRoZSBwYWdlJ3MgYGJhc2VgIHRhZy5cbiAgICovXG4gIHJlc29sdmVDb2xvcihjb2xvcjogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBpZiAodGhpcy5iYXNlICYmIHRoaXMuYmFzZS5ocmVmKSB7XG4gICAgICBjb25zdCBoYXNoSW5kZXggPSBjb2xvci5pbmRleE9mKCcjJyk7XG5cbiAgICAgIGlmIChoYXNoSW5kZXggPiAtMSAmJiBjb2xvci5pbmRleE9mKCd1cmwnKSA+IC0xKSB7XG4gICAgICAgIHJldHVybiBjb2xvci5zbGljZSgwLCBoYXNoSW5kZXgpICsgbG9jYXRpb24uaHJlZiArIGNvbG9yLnNsaWNlKGhhc2hJbmRleCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIHRpbWVzdGFtcC5cbiAgICovXG4gIGdldFRpbWVzdGFtcCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmhhc1BlcmYgPyB3aW5kb3cucGVyZm9ybWFuY2Uubm93KCkgOiBEYXRlLm5vdygpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyB0aGUgdmFsdWUgZm9yIGFuIFNWRyBhcmMuXG4gICAqIEBwYXJhbSBjdXJyZW50ICAgICAgIEN1cnJlbnQgdmFsdWUuXG4gICAqIEBwYXJhbSB0b3RhbCAgICAgICAgIE1heGltdW0gdmFsdWUuXG4gICAqIEBwYXJhbSBwYXRoUmFkaXVzICAgIFJhZGl1cyBvZiB0aGUgU1ZHIHBhdGguXG4gICAqIEBwYXJhbSBlbGVtZW50UmFkaXVzIFJhZGl1cyBvZiB0aGUgU1ZHIGNvbnRhaW5lci5cbiAgICogQHBhcmFtIGlzU2VtaWNpcmNsZSAgV2hldGhlciB0aGUgZWxlbWVudCBzaG91bGQgYmUgYSBzZW1pY2lyY2xlLlxuICAgKi9cbiAgZ2V0QXJjKGN1cnJlbnQ6IG51bWJlciwgdG90YWw6IG51bWJlciwgcGF0aFJhZGl1czogbnVtYmVyLCBlbGVtZW50UmFkaXVzOiBudW1iZXIsIGlzU2VtaWNpcmNsZSA9IGZhbHNlKTogc3RyaW5nIHtcbiAgICBjb25zdCB2YWx1ZSA9IE1hdGgubWF4KDAsIE1hdGgubWluKGN1cnJlbnQgfHwgMCwgdG90YWwpKTtcbiAgICBjb25zdCBtYXhBbmdsZSA9IGlzU2VtaWNpcmNsZSA/IDE4MCA6IDM1OS45OTk5O1xuICAgIGNvbnN0IHBlcmNlbnRhZ2UgPSB0b3RhbCA9PT0gMCA/IG1heEFuZ2xlIDogKHZhbHVlIC8gdG90YWwpICogbWF4QW5nbGU7XG4gICAgY29uc3Qgc3RhcnQgPSB0aGlzLl9wb2xhclRvQ2FydGVzaWFuKGVsZW1lbnRSYWRpdXMsIHBhdGhSYWRpdXMsIHBlcmNlbnRhZ2UpO1xuICAgIGNvbnN0IGVuZCA9IHRoaXMuX3BvbGFyVG9DYXJ0ZXNpYW4oZWxlbWVudFJhZGl1cywgcGF0aFJhZGl1cywgMCk7XG4gICAgY29uc3QgYXJjU3dlZXAgPSBwZXJjZW50YWdlIDw9IDE4MCA/IDAgOiAxO1xuXG4gICAgcmV0dXJuIGBNICR7c3RhcnR9IEEgJHtwYXRoUmFkaXVzfSAke3BhdGhSYWRpdXN9IDAgJHthcmNTd2VlcH0gMCAke2VuZH1gO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIHBvbGFyIGNvb3JhZGluYXRlcyB0byBDYXJ0ZXNpYW4uXG4gICAqIEBwYXJhbSBlbGVtZW50UmFkaXVzICBSYWRpdXMgb2YgdGhlIHdyYXBwZXIgZWxlbWVudC5cbiAgICogQHBhcmFtIHBhdGhSYWRpdXMgICAgIFJhZGl1cyBvZiB0aGUgcGF0aCBiZWluZyBkZXNjcmliZWQuXG4gICAqIEBwYXJhbSBhbmdsZUluRGVncmVlcyBEZWdyZWUgdG8gYmUgY29udmVydGVkLlxuICAgKi9cbiAgcHJpdmF0ZSBfcG9sYXJUb0NhcnRlc2lhbihlbGVtZW50UmFkaXVzOiBudW1iZXIsIHBhdGhSYWRpdXM6IG51bWJlciwgYW5nbGVJbkRlZ3JlZXM6IG51bWJlcik6IHN0cmluZyB7XG4gICAgY29uc3QgYW5nbGVJblJhZGlhbnMgPSAoYW5nbGVJbkRlZ3JlZXMgLSA5MCkgKiBERUdSRUVfSU5fUkFESUFOUztcbiAgICBjb25zdCB4ID0gZWxlbWVudFJhZGl1cyArIHBhdGhSYWRpdXMgKiBNYXRoLmNvcyhhbmdsZUluUmFkaWFucyk7XG4gICAgY29uc3QgeSA9IGVsZW1lbnRSYWRpdXMgKyBwYXRoUmFkaXVzICogTWF0aC5zaW4oYW5nbGVJblJhZGlhbnMpO1xuXG4gICAgcmV0dXJuIHggKyAnICcgKyB5O1xuICB9XG59XG4iXX0=